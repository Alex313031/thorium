## LIST OF ALL POSSIBLE GN ARGUMENTS

absl_build_tests
    Current value (from the default) = true
      From //third_party/abseil-cpp/absl.gni:23

action_pool_depth
    Current value (from the default) = -1
      From //build/toolchain/BUILD.gn:10

    Pool for non remote tasks.

added_rust_stdlib_libs
    Current value (from the default) = []
      From //build/config/rust.gni:86

    Any extra std rlibs in your Rust toolchain, relative to the standard
    Rust toolchain. Typically used with 'rust_sysroot_absolute'

allow_critical_memory_pressure_handling_in_foreground
    Current value (from the default) = false
      From //content/common/features.gni:16

allow_runtime_configurable_key_storage
    Current value (from the default) = false
      From //components/os_crypt/sync/features.gni:10

    Whether to make account and service names for the crypto key storage
    configurable at runtime for embedders.
   
    Currently only has an effect on macOS via KeychainPassword

also_build_ash_chrome
    Current value (from the default) = false
      From //build/config/chromeos/ui_mode.gni:26

    Setting this to true when building linux Lacros-chrome will cause it to
    *also* build linux ash-chrome in a subdirectory using an alternate
    toolchain.
    Don't set this unless you're sure you want it, because it'll double
    your build time.

also_build_lacros_chrome
    Current value (from the default) = false
      From //build/config/chromeos/ui_mode.gni:30

    Setting this to true when building linux ash-chrome will cause it to
    *also* build linux Lacros-chrome in a subdirectory using an alternate toolchain.

also_build_lacros_chrome_for_architecture
    Current value (from the default) = ""
      From //build/config/chromeos/ui_mode.gni:35

    Setting this when building ash-chrome will cause it to
    *also* build Lacros-chrome in a subdirectory using an alternate toolchain.
    You can set this to either "amd64" or "arm".

alternate_cdm_storage_id_key
    Current value (from the default) = ""
      From //media/media_options.gni:253

    If |enable_cdm_storage_id| is set, then an implementation specific key
    must also be provided. It can be provided by defining CDM_STORAGE_ID_KEY
    (which takes precedence), or by setting |alternate_cdm_storage_id_key|.
    The key must be a string of at least 32 characters.

android_channel
    Current value (from the default) = "default"
      From //build/config/android/channel.gni:8

    The channel to build on Android: stable, beta, dev, canary, work, or
    default. "default" should be used on non-official builds.

android_full_debug
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:62

    Normally, Android builds are lightly optimized, even for debug builds, to
    keep binary size down. Setting this flag to true disables such optimization

angle_64bit_current_cpu
    Current value (from the default) = true
      From //third_party/angle/gni/angle.gni:119

angle_always_log_info
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:264

angle_assert_always_on
    Current value (from the default) = true
      From //third_party/angle/gni/angle.gni:113

angle_build_all
    Current value (from the default) = false
      From //third_party/angle/BUILD.gn:48

    Don't build extra (test, samples etc) for Windows UWP. We don't have
    infrastructure (e.g. windowing helper functions) in place to run them.
    Also don't build them with MSVC, because tests and unused dependencies
    often have problems building with it, e.g. for C++20.

angle_build_capture_replay_tests
    Current value (from the default) = false
      From //third_party/angle/src/tests/capture_replay_tests/BUILD.gn:10

    Determines if we build the capture_replay_tests. Off by default.

angle_build_mesa
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:318

angle_build_tests
    Current value (from the default) = true
      From //third_party/angle/gni/angle.gni:331

    True if we want to build the ANGLE test suites. On by default in most configs.

angle_build_vulkan_system_info
    Current value (from the default) = true
      From //third_party/angle/gni/angle.gni:312

angle_capture_replay_composite_file_id
    Current value (from the default) = 1
      From //third_party/angle/src/tests/capture_replay_tests/BUILD.gn:15

angle_capture_replay_test_trace_dir
    Current value (from the default) = "traces"
      From //third_party/angle/src/tests/capture_replay_tests/BUILD.gn:13

    Set the trace directory. Default is traces

angle_debug_layers_enabled
    Current value (from the default) = true
      From //third_party/angle/gni/angle.gni:140

    By default we enable debug layers when asserts are turned on.

angle_delegate_workers
    Current value (from the default) = true
      From //third_party/angle/gni/angle.gni:178

    By default, ANGLE is using a thread pool for parallel compilation.
    Activating the delegate worker results in posting the tasks using the
    embedder API. In Chromium code base, it results in sending tasks to the
    worker thread pool.

angle_dump_pipeline_cache_graph
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:262

angle_egl_extension
    Current value (from the default) = ""
      From //third_party/angle/BUILD.gn:68

    Allow shared library custom name extensions for setting soname such as libEGL.so.1

angle_enable_abseil
    Current value (from the default) = true
      From //third_party/angle/BUILD.gn:56

    Abseil has trouble supporting MSVC, particularly regarding component builds.
    http://crbug.com/1126524

angle_enable_annotator_run_time_checks
    Current value (from the default) = false
      From //third_party/angle/BUILD.gn:59

    Adds run-time checks to filter out EVENT() messages when the debug annotator is disabled.

angle_enable_apple_translator_workarounds
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:326

angle_enable_cgl
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:323

    TODO(jdarpinian): Support enabling CGL and EAGL at the same time using the soft linking code. Also support disabling both for Metal-only builds.

angle_enable_cl
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:21

    Enables OpenCL support, off by default.

angle_enable_cl_passthrough
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:210

    Enables the OpenCL pass-through back end

angle_enable_cl_testing
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:24

    Enables OpenCL testing support, off by default.

angle_enable_commit_id
    Current value (from the default) = true
      From //third_party/angle/BUILD.gn:52

    Enable generating current commit information using git

angle_enable_context_mutex
    Current value (from the default) = true
      From //third_party/angle/BUILD.gn:88

angle_enable_context_mutex_recursion
    Current value (from the default) = false
      From //third_party/angle/BUILD.gn:101

    May need to enable to fix recursion when vkAcquireNextImageKHR() returns back to ANGLE from
    eglClientWaitSyncKHR(). May happen if Android Presentation Engine uses
    EGL_KHR_fence_sync instead of EGL_ANDROID_native_fence_sync for synchronization.
    To check call: adb shell "dumpsys SurfaceFlinger | grep 'Sync configuration'"
    The Android's "testDrawingHardwareBitmapNotLeaking" test may be used for testing.
    Disable this option to save performance on platforms that does not require recursion.

angle_enable_crc_for_pipeline_cache
    Current value (from the default) = true
      From //third_party/angle/src/libANGLE/renderer/vulkan/BUILD.gn:36

    Enable using CRC for pipeline cache data

angle_enable_custom_vulkan_cmd_buffers
    Current value (from the default) = true
      From //third_party/angle/src/libANGLE/renderer/vulkan/BUILD.gn:17

    Enable custom (cpu-side) secondary command buffers

angle_enable_custom_vulkan_outside_render_pass_cmd_buffers
    Current value (from the default) = true
      From //third_party/angle/src/libANGLE/renderer/vulkan/BUILD.gn:26

angle_enable_custom_vulkan_render_pass_cmd_buffers
    Current value (from the default) = true
      From //third_party/angle/src/libANGLE/renderer/vulkan/BUILD.gn:30

angle_enable_d3d11
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:184

angle_enable_d3d11_compositor_native_window
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:291

angle_enable_d3d9
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:183

angle_enable_desktop_glsl
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:253

    Translator frontend support:

angle_enable_eagl
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:297

    We should use EAGL (ES) on iOS except on Mac Catalyst on Intel CPUs, which uses CGL (desktop GL).

angle_enable_essl
    Current value (from the default) = true
      From //third_party/angle/gni/angle.gni:257

angle_enable_gl
    Current value (from the default) = true
      From //third_party/angle/gni/angle.gni:186

angle_enable_gl_desktop_backend
    Current value (from the default) = true
      From //third_party/angle/gni/angle.gni:204

angle_enable_gl_desktop_frontend
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:32

    Enable Desktop GL frontend support.

angle_enable_gl_null
    Current value (from the default) = true
      From //third_party/angle/src/libANGLE/renderer/gl/gl_backend.gni:8

angle_enable_global_mutex_load_time_allocate
    Current value (from the default) = false
      From //third_party/angle/BUILD.gn:86

angle_enable_global_mutex_recursion
    Current value (from the default) = false
      From //third_party/angle/BUILD.gn:81

angle_enable_glsl
    Current value (from the default) = true
      From //third_party/angle/gni/angle.gni:258

angle_enable_hlsl
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:256

    Translator backend support:

angle_enable_memory_alloc_logging
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:272

    Memory allocation logging support. This feature is for debugging only.
    Disabled by default.

angle_enable_metal
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:207

    http://anglebug.com/40096506

angle_enable_null
    Current value (from the default) = true
      From //third_party/angle/gni/angle.gni:203

    Disable null backend to save space for official build.

angle_enable_overlay
    Current value (from the default) = true
      From //third_party/angle/gni/angle.gni:316

    Enable overlay by default when debug layers are enabled.  This is currently only implemented on
    Vulkan.

angle_enable_perf_counter_output
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:294

    Disable performance counter output by default

angle_enable_renderdoc
    Current value (from the default) = true
      From //third_party/angle/gni/angle.gni:335

angle_enable_share_context_lock
    Current value (from the default) = false
      From //third_party/angle/BUILD.gn:73

angle_enable_swiftshader
    Current value (from the default) = true
      From //third_party/angle/gni/angle.gni:250

angle_enable_trace
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:259

angle_enable_trace_android_logcat
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:260

angle_enable_trace_events
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:261

angle_enable_unwind_backtrace_support
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:268

    Unwind backtrace support. This feature is currently only implemented
    on Android for debugging purposes. Disabled by default.

angle_enable_vulkan
    Current value (from the default) = true
      From //third_party/angle/gni/angle.gni:191

angle_enable_vulkan_api_dump_layer
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:285

angle_enable_vulkan_gpu_trace_events
    Current value (from the default) = false
      From //third_party/angle/src/libANGLE/renderer/vulkan/BUILD.gn:20

    Enable Vulkan GPU trace event capability

angle_enable_vulkan_shared_ring_buffer_cmd_alloc
    Current value (from the default) = false
      From //third_party/angle/src/libANGLE/renderer/vulkan/BUILD.gn:33

    Enable shared ring buffer command buffer allocator

angle_enable_vulkan_system_info
    Current value (from the default) = false
      From //third_party/angle/BUILD.gn:39

    Enable using Vulkan to collect system info as a fallback.

angle_enable_vulkan_validation_layers
    Current value (from the default) = true
      From //third_party/angle/gni/angle.gni:281

angle_enable_wgpu
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:216

angle_expose_glx_entry_points
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:45

    Expose GLX entry points by default when using Desktop GL on Linux.

angle_expose_non_conformant_extensions_and_versions
    Current value (from the default) = false
      From //third_party/angle/BUILD.gn:62

    Enables non-conformant extensions and features

angle_expose_wgl_entry_points
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:42

    Expose WGL entry points, which is necessary for running windows desktop GL applications against ANGLE.
    TODO(http://anglebug.com/42266094): This condition should be `angle_enable_gl_desktop_frontend && is_win`
    This is disabled by default on Windows because it was causing some test failures. Once the WGL frontend
    has more functionality implemented, we can re-enable this.

angle_extract_native_libs
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:11

    Extract native libs in ANGLE apk. Useful for flamegraph generation.

angle_force_context_check_every_call
    Current value (from the default) = false
      From //third_party/angle/BUILD.gn:65

    Optional feature that forces dirty state whenever we use a new context regardless of thread.

angle_glesv2_extension
    Current value (from the default) = ""
      From //third_party/angle/BUILD.gn:69

angle_has_astc_encoder
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:223

    ASTC emulation is only built on standalone non-android builds

angle_has_frame_capture
    Current value (from the default) = true
      From //third_party/angle/gni/angle.gni:170

    Frame capture code is enabled by default if rapidjson is available.

angle_has_histograms
    Current value (from the default) = true
      From //third_party/angle/gni/angle.gni:328

angle_has_rapidjson
    Current value (from the default) = true
      From //third_party/angle/gni/angle.gni:129

    Indicate if the rapidJSON library is available to build with in third_party/.

angle_is_msvc
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:157

angle_is_winappsdk
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:131

angle_is_winuwp
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:155

    There's no "is_winuwp" helper in BUILDCONFIG.gn, so we define one ourselves
    Windows App SDK is almost UWP but for Win32, so we want all the same things

angle_libs_suffix
    Current value (from the default) = ""
      From //third_party/angle/gni/angle.gni:163

angle_link_glx
    Current value (from the default) = false
      From //third_party/angle/BUILD.gn:42

    Link in system libGL, to work with apitrace.  See doc/DebuggingTips.md.

angle_lunarg_vulkantools_dir
    Current value (from the default) = "//third_party/angle/third_party/lunarg-vulkantools/src"
      From //third_party/angle/gni/angle.gni:310

angle_restricted_traces
    Current value (from the default) = []
      From //third_party/angle/gni/angle.gni:26

angle_shared_libvulkan
    Current value (from the default) = true
      From //third_party/angle/gni/angle.gni:151

    Vulkan loader is statically linked on Mac. http://anglebug.com/40096682

angle_standalone
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:181

    True if we are building inside an ANGLE checkout.

angle_test_enable_system_egl
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:227

angle_use_custom_libvulkan
    Current value (from the default) = true
      From //third_party/angle/src/common/vulkan/BUILD.gn:13

angle_use_gbm
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:72

angle_use_vulkan_display
    Current value (from the default) = true
      From //third_party/angle/gni/angle.gni:76

angle_use_vulkan_null_display
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:200

    When set to true, ANGLE will not use VK_KHR_surface and VK_KHR_swapchain
    extensions. Content can be rendered only off-screen.

angle_use_wayland
    Current value (from the default) = true
      From //third_party/angle/gni/angle.gni:75

angle_use_x11
    Current value (from the default) = true
      From //third_party/angle/gni/angle.gni:73

angle_vulkan_display_mode
    Current value (from the default) = "simple"
      From //third_party/angle/gni/angle.gni:14

    Display mode for ANGLE vulkan display, could be 'simple' or 'headless', default is 'simple'.

angle_vulkan_headers_dir
    Current value = "//third_party/vulkan-headers/src"
      From //.gn:58
    Overridden from the default = "//third_party/angle/third_party/vulkan-headers/src"
      From //third_party/angle/gni/angle.gni:304

angle_vulkan_loader_dir
    Current value = "//third_party/vulkan-loader/src"
      From //.gn:59
    Overridden from the default = "//third_party/angle/third_party/vulkan-loader/src"
      From //third_party/angle/gni/angle.gni:305

angle_vulkan_tools_dir
    Current value = "//third_party/vulkan-tools/src"
      From //.gn:60
    Overridden from the default = "//third_party/angle/third_party/vulkan-tools/src"
      From //third_party/angle/gni/angle.gni:306

angle_vulkan_validation_layers_dir
    Current value = "//third_party/vulkan-validation-layers/src"
      From //.gn:62
    Overridden from the default = "//third_party/angle/third_party/vulkan-validation-layers/src"
      From //third_party/angle/gni/angle.gni:308

angle_wayland_dir
    Current value (from the default) = "//third_party/angle/third_party/wayland"
      From //third_party/angle/gni/angle.gni:302

    Directory where to find wayland source files

angle_with_capture_by_default
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:18

    Defaults to capture building to $root_out_dir/angle_libs/with_capture.
    Switch on to build capture to $root_out_dir.

apm_debug_dump
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:129

    Selects whether debug dumps for the audio processing module
    should be generated.

archive_seed_corpus
    Current value (from the default) = true
      From //build/config/sanitizers/sanitizers.gni:121

    When true, seed corpora archives are built.

assert_cpp20
    Current value (from the default) = true
      From //base/allocator/partition_allocator/partition_alloc.gni:435

    Assert that PartitionAlloc and MiraclePtr run on C++20 when set to true.
    Embedders may opt-out of using C++ 20 build.

auto_profile_path
    Current value (from the default) = ""
      From //build/config/compiler/BUILD.gn:84

    AFDO (Automatic Feedback Directed Optimizer) is a form of profile-guided
    optimization that GCC supports. It used by ChromeOS in their official
    builds. To use it, set auto_profile_path to the path to a file containing
    the needed gcov profiling data.

backup_ref_ptr_extra_oob_checks
    Current value (from the default) = true
      From //base/allocator/partition_allocator/partition_alloc.gni:237

backup_ref_ptr_poison_oob_ptr
    Current value (from the default) = false
      From //base/allocator/partition_allocator/partition_alloc.gni:254

blink_animation_use_time_delta
    Current value (from the default) = false
      From //third_party/blink/renderer/core/animation/BUILD.gn:11

    Use base::TimeDelta to represent time in renderer/core/animations. See
    http://crbug.com/737867

blink_enable_generated_code_formatting
    Current value (from the default) = false
      From //third_party/blink/renderer/config.gni:26

    Format the generated files to improve the code readability.  Apply clang-
    format, gn format, etc. to the generated files if possible.

blink_gc_plugin
    Current value (from the default) = true
      From //third_party/blink/renderer/BUILD.gn:19

    Set to true to enable the clang plugin that checks the usage of the  Blink
    garbage-collection infrastructure during compilation.

blink_gc_plugin_option_do_dump_graph
    Current value (from the default) = false
      From //third_party/blink/renderer/BUILD.gn:23

    Set to true to have the clang Blink GC plugin emit class graph (in JSON)
    with typed pointer edges; for debugging or other (internal) uses.

blink_heap_inside_shared_library
    Current value (from the default) = true
      From //third_party/blink/renderer/platform/heap/BUILD.gn:17

    Whether the blink heap code is compiled into a shared library.
    Embedders like CEF use this flag to include blink in a shared library under
    non-component build.

blink_symbol_level
    Current value (from the default) = -1
      From //third_party/blink/renderer/config.gni:40

    How many symbols to include in the build of blink. This affects
    the performance of the build since the symbols are large and dealing with
    them is slow.
      2 means regular build with symbols.
      1 means medium symbols, usually enough for backtraces only. Symbols with
    internal linkage (static functions or those in anonymous namespaces) may not
    appear when using this level. On some platforms (including Windows)
    filenames and line numbers will be included. Information about types and
    locals is not included.
      0 means minimal symbols, which on some platforms (including Windows) may
    include function names suitable for backtraces.
      -1 means auto-set according to debug/release and platform.

branding_file_path
    Current value (from the default) = "//chrome/app/theme/chromium/BRANDING"
      From //build/config/chrome_build.gni:86

    The path to the BRANDING file in chrome/app/theme.

branding_path_component
    Current value (from the default) = "chromium"
      From //build/config/chrome_build.gni:79

branding_path_product
    Current value (from the default) = "chromium"
      From //build/config/chrome_build.gni:80

build_allocation_stack_trace_recorder
    Current value (from the default) = false
      From //base/debug/debug.gni:18

    Whether to compile support for Allocation Stack Trace Recorder.
   
    The recorder is initially intended as a support tool for Arm's
    Memory Tagging Extensions. A history of the most recent allocations and
    frees is included in the crashpad report and gives developers information
    where the memory which was invalidly accessed was allocated or freed.
   
    Although it should work on other platforms as well, for the above reasons,
    we currently enable it only for Android when compiling for Arm64.

build_allocation_trace_recorder_full_reporting
    Current value (from the default) = false
      From //base/debug/debug.gni:28

    If enabled, the recorder gathers some additional information, i.e. number of
    collisions of slots, and prints these periodically.
   
    Since this might impact performance negatively, it's disabled by default.
    Even if it's disabled we still collect some data, i.e. total number of
    allocations. All other data will be set to a default value.

build_angle_deqp_tests
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:29

    Don't build dEQP by default.

build_angle_end2end_tests_aosp
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:34

build_angle_gles1_conform_tests
    Current value (from the default) = false
      From //third_party/angle/src/tests/BUILD.gn:10

build_angle_perftests
    Current value (from the default) = true
      From //third_party/angle/src/tests/BUILD.gn:13

build_angle_trace_perf_tests
    Current value (from the default) = false
      From //third_party/angle/src/tests/BUILD.gn:11

build_angle_trace_tests
    Current value (from the default) = false
      From //third_party/angle/src/tests/BUILD.gn:17

build_contextual_search
    Current value (from the default) = false
      From //components/contextual_search/features.gni:6

build_dawn_tests
    Current value (from the default) = true
      From //ui/gl/features.gni:22

    Should Dawn test binaries (unittests, end2end_tests, perf_tests) be built?
    Independent of use_dawn, which controls whether Dawn is used in Chromium.

build_libsrtp_tests
    Current value (from the default) = false
      From //third_party/libsrtp/BUILD.gn:11

    Tests may not be appropriate for some build environments, e.g. Windows.
    Rather than enumerate valid options, we just let clients ask for them.

build_mojo_proxy
    Current value (from the default) = false
      From //build/config/chromeos/args.gni:43

    Build Mojo Proxy binary, to be used as a IPCZ <=> Mojo Core translation layer.

build_tflite_with_nnapi
    Current value (from the default) = false
      From //third_party/tflite/features.gni:19

    This enables building TFLite's NNAPI delegate, currently experimental.

build_tflite_with_ruy
    Current value (from the default) = true
      From //third_party/tflite/features.gni:16

    Turns on TFLITE_WITH_RUY, using ruy as the gemm backend instead of gemmlowp.

build_tflite_with_xnnpack
    Current value (from the default) = true
      From //third_party/tflite/features.gni:12

build_with_internal_optimization_guide
    Current value (from the default) = false
      From //components/optimization_guide/features.gni:49

    When TFLite works for windows arm64, this lib should just work seamlessly.
    Use is_chrome_branded as a proxy for "does src-internal exist".

build_with_mediapipe_lib
    Current value (from the default) = false
      From //third_party/mediapipe/features.gni:11

    This should only be changed in a local args.gn file for now. This library is
    not ready to be built into Chromium yet.
   
    MediaPipe support is under development, but should work on Linux and Windows
    Intel chips.

build_with_mozilla
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:153

    Enable to use the Mozilla internal settings.

build_with_tflite_lib
    Current value (from the default) = true
      From //components/optimization_guide/features.gni:14

    This enables build with TFLite library.
    TODO(b/269198471): Make sure the internal archive files for opt guide get
      updated when win arm64 gets added as a supported platform for TFLite.

bundle_widevine_cdm
    Current value (from the default) = false
      From //third_party/widevine/cdm/widevine.gni:59

    Widevine CDM is bundled as part of Google Chrome and
    Google Chrome for Testing builds.

cast_streaming_enable_remoting
    Current value (from the default) = false
      From //components/cast_streaming/features.gni:9

    Whether the cast remoting feature should be enabled in this build.

cc_wrapper
    Current value (from the default) = ""
      From //build/toolchain/cc_wrapper.gni:36

    Set to "ccache", "icecc" or "distcc".  Probably doesn't work on windows.

channel_name_header_name
    Current value (from the default) = ""
      From //chrome/browser/request_header_integrity/buildflags.gni:10

chrome_enable_logging_by_default
    Current value (from the default) = true
      From //chrome/common/features.gni:34

    Enables the build to have logging enabled by default.
    This is intended for use only in developer builds.

chrome_pgo_phase
    Current value (from the default) = 0
      From //build/config/compiler/pgo/pgo.gni:23

    Specify the current PGO phase.
    Here's the different values that can be used:
        0 : Means that PGO is turned off.
        1 : Used during the PGI (instrumentation) phase.
        2 : Used during the PGO (optimization) phase.
    PGO profiles are generated from `dcheck_always_on = false` builds. Mixing
    those profiles with `dcheck_always_on = true` builds can cause the compiler
    to think some code is hotter than it actually is, potentially causing very
    bad compile times.

chrome_root_store_cert_management_ui
    Current value (from the default) = true
      From //chrome/common/features.gni:41

chrome_root_store_only
    Current value (from the default) = true
      From //net/features.gni:56

    Platforms for which certificate verification can only be performed using
    the builtin cert verifier with the Chrome Root Store.

chrome_root_store_optional
    Current value (from the default) = false
      From //net/features.gni:52

    Platforms for which certificate verification can be performed either using
    the builtin cert verifier with the Chrome Root Store, or with the platform
    verifier.
   
    Currently this is used only for Android because WebView does not use the
    builtin cert verifier, but uses the Android cert verifier.

chrome_root_store_supported
    Current value (from the default) = true
      From //net/features.gni:79

chrome_wide_echo_cancellation_supported
    Current value (from the default) = true
      From //media/media_options.gni:340

    Currently it is available on Win, Mac and Linux, since it requires the audio
    service to run in a separate process.

chromedriver_disclaim_responsibility
    Current value (from the default) = true
      From //chrome/test/chromedriver/BUILD.gn:21

    Make macOS request permissions for the chrome binary instead of its parent
    process (usually the Terminmal.app).
    This is required for running chrome tests on Google's CI machines, but for
    some vendor builds like Microsoft Teams they need to turn this off.

chromeos_afdo_platform
    Current value (from the default) = "atom"
      From //build/config/compiler/BUILD.gn:108

    This configuration is used to select a default profile in Chrome OS based on
    the microarchitectures we are using. This is only used if
    clang_use_default_sample_profile is true and clang_sample_profile_path is
    empty.

chromeos_is_browser_only
    Current value (from the default) = false
      From //build/config/chromeos/ui_mode.gni:19

    Deprecated, use is_chromeos_lacros.
   
    This controls UI configuration for Chrome.
    If this flag is set, we assume Chrome runs on Chrome OS devices, using
    Wayland (instead of X11).
   
    TODO(crbug.com/40118868):
    Define chromeos_product instead, which takes either "browser" or "ash".
    Re-define the following variables as:
    is_chromeos_lacros = chromeos_product == "browser"
    is_chromeos_ash = chromeos_product == "ash"

clang_base_path
    Current value (from the default) = "//third_party/llvm-build/Release+Asserts"
      From //build/config/clang/clang.gni:33

clang_diagnostic_dir
    Current value (from the default) = "../../tools/clang/crashreports"
      From //build/config/compiler/compiler.gni:121

clang_embed_bitcode
    Current value (from the default) = false
      From //build/config/clang/clang.gni:37

    Specifies whether or not bitcode should be embedded during compilation.
    This is used for creating a MLGO corpus from Chromium in the non-ThinLTO case.

clang_emit_debug_info_for_profiling
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:112

    Emit debug information for profiling wile building with clang.
    Only enable this for ChromeOS official builds for AFDO.

clang_sample_profile_path
    Current value (from the default) = ""
      From //build/config/compiler/BUILD.gn:92

    Path to an AFDO profile to use while building with clang, if any. Empty
    implies none.

clang_unsafe_buffers_paths
    Current value = "//build/config/unsafe_buffers_paths.txt"
      From //.gn:76
    Overridden from the default = ""
      From //build/config/BUILDCONFIG.gn:183

    Unsafe buffers. Location of file used by plugins to track portions of
    the codebase which have been made manifestly safe.

clang_use_chrome_plugins
    Current value (from the default) = true
      From //build/config/clang/clang.gni:15

clang_use_default_sample_profile
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:101

clang_use_raw_ptr_plugin
    Current value (from the default) = false
      From //build/config/clang/clang.gni:19

    Use this instead of clang_use_chrome_plugins to enable just the raw-ptr-plugin.

clang_version
    Current value (from the default) = "20"
      From //build/toolchain/toolchain.gni:54

com_init_check_hook_disabled
    Current value (from the default) = false
      From //base/BUILD.gn:68

    Set to true to disable COM init check hooks.

compile_credentials
    Current value (from the default) = true
      From //sandbox/linux/BUILD.gn:17

compile_suid_client
    Current value (from the default) = true
      From //sandbox/linux/BUILD.gn:15

compile_syscall_broker
    Current value (from the default) = true
      From //sandbox/linux/BUILD.gn:19

compiler_timing
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:115

    Turn this on to have the compiler output extra timing information.

compute_build_timestamp
    Current value (from the default) = "compute_build_timestamp.py"
      From //build/timestamp.gni:17

    This should be the filename of a script that prints a single line
    containing an integer that's a unix timestamp in UTC.
    This timestamp is used as build time and will be compiled into
    other code.
   
    This argument may look unused. Before removing please check with the
    chromecast team to see if they still use it internally.

compute_inputs_for_analyze
    Current value (from the default) = false
      From //build/config/compute_inputs_for_analyze.gni:13

    Enable this flag when running "gn analyze".
   
    This causes some gn actions to compute inputs immediately (via exec_script)
    where they would normally compute them only when executed (and write them to
    a depfile).
   
    This flag will slow down GN, but is required for analyze to work properly.

concurrent_links
    Current value (from the default) = -1
      From //build/toolchain/concurrent_links.gni:23

    Limit the number of concurrent links; we often want to run fewer
    links at once than we do compiles, because linking is memory-intensive.
    The default to use varies by platform and by the amount of memory
    available, so we call out to a script to get the right value.

content_enable_legacy_ipc
    Current value (from the default) = false
      From //content/common/features.gni:24

    We allow legacy IPC to be enabled for Android (GIN Java bridge), and
    Pepper usage.

content_shell_major_version
    Current value (from the default) = "999"
      From //content/shell/BUILD.gn:48

content_shell_product_name
    Current value (from the default) = "Thorium Shell"
      From //content/shell/BUILD.gn:46

content_shell_version
    Current value (from the default) = "999.7.3434.555"
      From //content/shell/BUILD.gn:47

copyright_header_name
    Current value (from the default) = ""
      From //chrome/browser/request_header_integrity/buildflags.gni:11

coverage_instrumentation_input_file
    Current value (from the default) = ""
      From //build/config/coverage/coverage.gni:36

    The path to the coverage instrumentation input file should be a source root
    absolute path (e.g. //out/Release/coverage_instrumentation_input.txt), and
    the file consists of multiple lines where each line represents a path to a
    source file, and the paths must be relative to the root build directory.
    e.g. ../../base/task/post_task.cc for build directory 'out/Release'.
   
    NOTE that this arg will be non-op if use_clang_coverage is false.

cppgc_allow_allocations_in_prefinalizers
    Current value (from the default) = false
      From //v8/BUILD.gn:320

    Enable allocations during prefinalizer invocations.

cppgc_enable_2gb_cage
    Current value (from the default) = false
      From //v8/gni/v8.gni:148

    Enable 2gb cage for fast compression/decompression. Currently disabled
    due to an increased number of OOMs.

cppgc_enable_caged_heap
    Current value (from the default) = true
      From //v8/BUILD.gn:313

cppgc_enable_larger_cage
    Current value (from the default) = true
      From //v8/gni/v8.gni:151

    Enable support for larger cages, up to 16GB.

cppgc_enable_object_names
    Current value (from the default) = false
      From //v8/gni/v8.gni:132

    Enable object names in cppgc for profiling purposes.

cppgc_enable_pointer_compression
    Current value (from the default) = false
      From //v8/gni/v8.gni:144

    Enable pointer compression in cppgc.

cppgc_enable_slim_write_barrier
    Current value (from the default) = true
      From //v8/gni/v8.gni:141

    Enables a slim write barrier that only performs a single check in the fast
    path and delegates all further checks to a slow path call. This is fast
    in a setting with few slow-path checks, i.e., with disabled young generation
    GC.

cppgc_enable_verify_heap
    Current value (from the default) = ""
      From //v8/BUILD.gn:317

    Enables additional heap verification phases and checks.

cppgc_enable_young_generation
    Current value (from the default) = false
      From //v8/gni/v8.gni:135

    Enable young generation in cppgc.

cppgc_is_standalone
    Current value (from the default) = false
      From //v8/gni/v8.gni:129

crashpad_dependencies
    Current value = "chromium"
      From //.gn:55
    Overridden from the default = "standalone"
      From //third_party/crashpad/crashpad/build/crashpad_buildconfig.gni:19

    Determines various flavors of build configuration, and which concrete
    targets to use for dependencies. Valid values are "standalone", "chromium",
    "fuchsia", "dart" or "external".

crashpad_http_transport_impl
    Current value (from the default) = "libcurl"
      From //third_party/crashpad/crashpad/util/net/tls.gni:21

crashpad_use_boringssl_for_http_transport_socket
    Current value (from the default) = true
      From //third_party/crashpad/crashpad/util/net/tls.gni:30

cros_board
    Current value (from the default) = ""
      From //build/config/chromeos/args.gni:8

    This is used only by Simple Chrome to bind its value to test-runner scripts
    generated at build-time.

cros_sdk_version
    Current value (from the default) = ""
      From //build/config/chromeos/args.gni:12

    Similar to cros_board above, this used only by test-runner scripts in
    Simple Chrome.

current_cpu
    Current value (from the default) = ""
      (Internally set; try `gn help current_cpu`.)

current_os
    Current value (from the default) = ""
      (Internally set; try `gn help current_os`.)

custom_toolchain
    Current value (from the default) = ""
      From //build/config/BUILDCONFIG.gn:147

    Allows the path to a custom target toolchain to be injected as a single
    argument, and set as the default toolchain.

custom_vulkan_loader_library_name
    Current value (from the default) = ""
      From //third_party/vulkan-loader/src/BUILD.gn:20

dawn_always_assert
    Current value (from the default) = false
      From //third_party/dawn/scripts/dawn_features.gni:65

    Enable Dawn's ASSERTs even in release builds

dawn_complete_static_libs
    Current value (from the default) = false
      From //third_party/dawn/scripts/dawn_features.gni:70

    Should the Dawn static libraries be fully linked vs. GN's default of
    treating them as source sets. This is useful for people using Dawn
    standalone to produce static libraries to use in their projects.

dawn_enable_d3d11
    Current value (from the default) = false
      From //third_party/dawn/scripts/dawn_features.gni:73

    Enables the compilation of Dawn's D3D11 backend

dawn_enable_d3d12
    Current value (from the default) = false
      From //third_party/dawn/scripts/dawn_features.gni:76

    Enables the compilation of Dawn's D3D12 backend

dawn_enable_desktop_gl
    Current value (from the default) = true
      From //third_party/dawn/scripts/dawn_features.gni:87

    Enables the compilation of Dawn's OpenGL backend
    (best effort, non-conformant)

dawn_enable_error_injection
    Current value (from the default) = true
      From //third_party/dawn/scripts/dawn_features.gni:102

dawn_enable_metal
    Current value (from the default) = false
      From //third_party/dawn/scripts/dawn_features.gni:79

    Enables the compilation of Dawn's Metal backend

dawn_enable_null
    Current value (from the default) = true
      From //third_party/dawn/scripts/dawn_features.gni:83

    Enables the compilation of Dawn's Null backend
    (required for unittests, obviously non-conformant)

dawn_enable_opengles
    Current value (from the default) = true
      From //third_party/dawn/scripts/dawn_features.gni:93

dawn_enable_spirv_validation
    Current value (from the default) = true
      From //third_party/dawn/scripts/dawn_features.gni:120

    Disable SPIR-V validation on Android because it adds a significant amount
    to the binary size, and Tint's output should be well-formed.

dawn_enable_vulkan
    Current value (from the default) = true
      From //third_party/dawn/scripts/dawn_features.gni:97

    Enables the compilation of Dawn's Vulkan backend
    Disables vulkan when compiling for UWP, since UWP only supports d3d

dawn_enable_vulkan_loader
    Current value (from the default) = true
      From //third_party/dawn/scripts/dawn_features.gni:116

dawn_enable_vulkan_validation_layers
    Current value (from the default) = true
      From //third_party/dawn/scripts/dawn_features.gni:111

dawn_tests_use_angle
    Current value (from the default) = true
      From //third_party/dawn/scripts/dawn_features.gni:50

dawn_use_built_dxc
    Current value (from the default) = false
      From //third_party/dawn/scripts/dawn_features.gni:60

    Whether we allow building DXC.
    DXC requires SM6.0+ which is blocklisted on x86.
    See crbug.com/tint/1753.

dawn_use_swiftshader
    Current value (from the default) = true
      From //third_party/dawn/scripts/dawn_features.gni:55

    Enables SwiftShader as the fallback adapter. Requires dawn_swiftshader_dir
    to be set to take effect.
    TODO(dawn:1536): Enable SwiftShader for Android.

dcheck_always_on
    Current value (from the default) = true
      From //build/config/dcheck_always_on.gni:25

dcheck_is_configurable
    Current value (from the default) = false
      From //build/config/dcheck_always_on.gni:14

    Enables DCHECKs to be built-in, but to default to being non-fatal/log-only.
    DCHECKS can then be set as fatal/non-fatal via the "DcheckIsFatal" feature.
    See https://bit.ly/dcheck-albatross for details on how this is used.

devtools_components_visibility
    Current value (from the default) = ["*"]
      From //third_party/devtools-frontend/src/front_end/ui/components/visibility.gni:8

devtools_css_hot_reload_enabled
    Current value (from the default) = false
      From //third_party/devtools-frontend/src/scripts/build/ninja/generate_css.gni:11

    Whether to enable CSS hot reloading with `watch` script or not.

devtools_dcheck_always_on
    Current value (from the default) = true
      From //third_party/devtools-frontend/src/scripts/build/ninja/vars.gni:8

devtools_entrypoints_visibility
    Current value (from the default) = ["*"]
      From //third_party/devtools-frontend/src/front_end/entrypoints/visibility.gni:8

devtools_fast_bundle
    Current value (from the default) = true
      From //third_party/devtools-frontend/src/scripts/build/ninja/bundle.gni:12

    If this is enabled, devtools build uses esbuild instead of rollup.js to
    bundle JavaScript files.

devtools_grd_location
    Current value (from the default) = "third_party/devtools-frontend/src/front_end/devtools_resources.grd"
      From //build/config/devtools.gni:29

devtools_lit_visibility
    Current value (from the default) = ["*"]
      From //third_party/devtools-frontend/src/front_end/ui/lit-html/visibility.gni:8

devtools_location
    Current value (from the default) = "third_party/devtools-frontend/src/"
      From //build/config/devtools.gni:27

devtools_models_visibility
    Current value (from the default) = ["*"]
      From //third_party/devtools-frontend/src/front_end/models/visibility.gni:8

devtools_panels_visibility
    Current value (from the default) = ["*"]
      From //third_party/devtools-frontend/src/front_end/panels/visibility.gni:8

devtools_release_sourcemaps
    Current value (from the default) = false
      From //third_party/devtools-frontend/src/scripts/build/ninja/bundle.gni:20

    If this is enabled, we will emit source maps for the entrypoint bundles.
    Since we only bundle release builds, this flag can't be used with
    is_debug = true.
    Note that this flag works regardless of the devtools_skip_typecheck or
    devtools_fast_bundle GN arg. Both rollup.js or ESBuild will emit source
    maps if this flag is set.

devtools_root_location
    Current value (from the default) = "third_party/devtools-frontend/src"
      From //build/config/devtools.gni:26

devtools_skip_typecheck
    Current value (from the default) = true
      From //third_party/devtools-frontend/src/scripts/build/typescript/typescript.gni:20

devtools_third_party_visibility
    Current value (from the default) = ["*"]
      From //third_party/devtools-frontend/src/front_end/third_party/visibility.gni:8

devtools_ui_legacy_visibility
    Current value (from the default) = ["*"]
      From //third_party/devtools-frontend/src/front_end/ui/legacy/visibility.gni:8

devtools_use_remoteexec
    Current value (from the default) = false
      From //third_party/devtools-frontend/src/scripts/build/typescript/typescript.gni:18

    Set to true to enable remote compilation of TypeScript using reclient.
    This flag is temporarily until DevTools reclient support has stabilized.
    At that point, this flag will be folded together with "use_remoteexec".
    TODO(crbug.com/1139220): Remove the flag once we are confident.

devtools_visibility
    Current value = ["*"]
      From //.gn:74
    Overridden from the default = []
      From //third_party/devtools-frontend/src/front_end/visibility.gni:6

disable_brotli_filter
    Current value (from the default) = false
      From //net/features.gni:27

    Do not disable brotli filter by default.

disable_fieldtrial_testing_config
    Current value (from the default) = false
      From //components/variations/service/BUILD.gn:15

    Set to true make a build that disables activation of field trial tests
    specified in testing/variations/fieldtrial_testing_config.json.
    Note: For Chrome-branded Android builds, this is always considered as set to
    true (see below). This is done to avoid the binary size impact (~40 KiB) on
    Android.

disable_file_support
    Current value (from the default) = false
      From //net/features.gni:11

    Disables support for file URLs.  File URL support requires use of icu.
    Cronet does not support file URLs.

disable_ftp_support
    Current value (from the default) = false
      From //net/features.gni:18

    Disable FTP support.

disable_histogram_support
    Current value (from the default) = false
      From //components/cronet/BUILD.gn:16

    If set to true, this will remove histogram manager to reduce binary size.

disable_libfuzzer
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:99

    Helper variable for testing builds with disabled libfuzzer.
    Not for client use.

disable_zstd_filter
    Current value (from the default) = false
      From //net/features.gni:30

    Do not disable zstd filter by default, except for Cronet builds.

dpf_abseil_cpp_dir
    Current value (from the default) = "//third_party/abseil-cpp"
      From //third_party/distributed_point_functions/features.gni:7

dpf_highway_cpp_dir
    Current value (from the default) = "//third_party/highway"
      From //third_party/distributed_point_functions/features.gni:8

enable_accessibility_service
    Current value (from the default) = false
      From //services/accessibility/buildflags.gni:11

    Used to enable the Accessibility Service. Override this in
    gn args on supported platforms (see below).

enable_accessibility_service_internal
    Current value (from the default) = false
      From //services/accessibility/buildflags.gni:20

enable_all_rust_features
    Current value (from the default) = false
      From //build/config/rust.gni:50

    As we incrementally enable Rust on mainstream builders, we want to enable
    the toolchain (by switching 'enable_rust' to true) while still disabling
    almost all Rust features). Yet we still want to have some builders with
    all Rust features enabled.

enable_allocator_shim_partition_alloc_dispatch_with_advanced_checks_support
    Current value (from the default) = false
      From //base/allocator/partition_allocator/partition_alloc.gni:86

enable_android_site_isolation
    Current value (from the default) = false
      From //chrome/common/BUILD.gn:29

enable_arcore
    Current value (from the default) = false
      From //device/vr/buildflags/buildflags.gni:21

enable_assistant_integration_tests
    Current value (from the default) = false
      From //chromeos/ash/components/assistant/assistant.gni:18

    Enable Assistant integration tests using LibAssistant and a fake S3 server.
    This requires libassistant.so to support grpc communication with the S3
    server, which increases the library size, which is why we introduced this
    flag to disable them in the release builds.

enable_av1_decoder
    Current value (from the default) = true
      From //media/media_options.gni:133

    If overriding this to false, possibly via its component values,
    `enable_libaom` should likely also be overriddent to false.

enable_background_contents
    Current value (from the default) = true
      From //chrome/common/features.gni:44

    Enables support for background apps.

enable_background_mode
    Current value (from the default) = true
      From //chrome/common/features.gni:45

enable_backup_ref_ptr_feature_flag
    Current value (from the default) = true
      From //base/allocator/partition_allocator/partition_alloc.gni:224

enable_backup_ref_ptr_instance_tracer
    Current value (from the default) = false
      From //base/allocator/partition_allocator/partition_alloc.gni:234

enable_backup_ref_ptr_slow_checks
    Current value (from the default) = false
      From //base/allocator/partition_allocator/partition_alloc.gni:213

enable_backup_ref_ptr_support
    Current value (from the default) = true
      From //base/allocator/partition_allocator/partition_alloc.gni:163

enable_base_tracing
    Current value (from the default) = true
      From //build_overrides/build.gni:39

    Tracing support requires //third_party/perfetto, which is not available in
    libchrome (CrOS's version of //base). This flag can disable tracing support
    altogether, in which case all tracing instrumentation in //base becomes a
    no-op.
    TODO(crbug.com/40124378): Add dependency on perfetto to support typed events.

enable_basic_print_dialog
    Current value (from the default) = true
      From //printing/buildflags/buildflags.gni:30

    Enables the printing system dialog for platforms that support printing
    and have a system dialog.

enable_blink_bindings_cooperating_scheduling
    Current value (from the default) = false
      From //third_party/blink/renderer/platform/BUILD.gn:243

    Enable cooperating scheduling hooks in auto-generated Blink bindings code.

enable_blink_bindings_tracing
    Current value (from the default) = false
      From //third_party/blink/renderer/platform/BUILD.gn:240

    Enable TRACE_EVENT instrumentation for Blink bindings.
    Disabled by default as it increases binary size.

enable_bound_session_credentials
    Current value (from the default) = true
      From //components/signin/features.gni:10

    Compile time flag for Bound Session Credentials.

enable_bracketed_proxy_uris
    Current value (from the default) = true
      From //net/features.gni:64

    Bracketed URIs parsing is only available for debug builds.
    TODO(crbug.com/365771838): Ensure tests are updated if needed if this
    feature is changed at all.

enable_browser_speech_service
    Current value (from the default) = true
      From //chrome/services/speech/buildflags/buildflags.gni:24

    Whether the speech service is implemented in the browser as a hosted service
    possibly running in a utility process.
   
    On other platforms, that service is either
    * implemented some other way (e.g. ChromeOS, where ML Service provides the
      implementation); or
    * not implemented, and corresponding features don't exist as part of Chrome
      (e.g. Android, where Live Caption is instead a system feature).

enable_call_graph_profile_sort
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:237

enable_callgrind
    Current value (from the default) = false
      From //third_party/pdfium/pdfium.gni:66

    Enable callgrind for performance profiling

enable_captive_portal_detection
    Current value (from the default) = true
      From //components/captive_portal/core/features.gni:9

enable_cardboard
    Current value (from the default) = false
      From //device/vr/buildflags/buildflags.gni:19

enable_cast_audio_renderer
    Current value (from the default) = false
      From //build/config/cast.gni:24

    True to enable the cast audio renderer.
   
    TODO(crbug.com/1293520): Remove this buildflag.

enable_cast_receiver
    Current value (from the default) = false
      From //build/config/cast.gni:42

    Set this true for a Chromecast build. Chromecast builds are supported on
    Linux, Android, ChromeOS, and Fuchsia.

enable_cast_renderer
    Current value (from the default) = false
      From //build/config/cast.gni:51

enable_cdm_host_verification
    Current value (from the default) = false
      From //media/media_options.gni:241

enable_cdm_storage_id
    Current value (from the default) = false
      From //media/media_options.gni:246

    Enable Storage ID which is used by CDMs. This is only available with chrome
    branding, but may be overridden by other embedders.

enable_cet_shadow_stack
    Current value (from the default) = true
      From //build/config/compiler/compiler.gni:128

    Mark binaries as compatible with Shadow Stack of Control-flow Enforcement
    Technology (CET). If Windows version and hardware supports the feature and
    it's enabled by OS then additional validation of return address will be
    performed as mitigation against Return-oriented programming (ROP).
    https://chromium.googlesource.com/chromium/src/+/main/docs/design/sandbox.md#cet-shadow-stack

enable_check_raw_ptr_fields
    Current value (from the default) = true
      From //build/config/clang/clang.gni:22

enable_check_raw_ref_fields
    Current value (from the default) = true
      From //build/config/clang/clang.gni:29

enable_chrome_notifications
    Current value (from the default) = true
      From //chrome/common/features.gni:48

    Enables usage of notifications via Chrome's MessageCenter.

enable_chromium_prelude
    Current value (from the default) = true
      From //build/config/rust.gni:44

    The chromium prelude crate provides the `chromium::import!` macro which
    is needed to depend on first-party rust libraries. Third-party libraries
    are specified with cargo_crate and do not get imported through this macro.
   
    The macro requires //third_party/rust for syn, quote, and proc_macro2.
    Downstream projects that want to use //build for the rust GN templates but
    don't want to enable the chromium prelude can disable it here, and should
    specify a globally unique `crate_name` in their rust library GN rules
    instead. Note that using a `crate_name` is strongly discouraged inside
    Chromium, and is also discouraged for downstream projects when possible.

enable_click_to_call
    Current value (from the default) = true
      From //components/sharing_message/buildflags.gni:11

    TODO(crbug.com/41481724): Remove this flag and corresponding build
    conditions.
    Disable Click to Call on Fuchsia.

enable_compose
    Current value (from the default) = true
      From //components/compose/features.gni:9

    Whether Compose is enabled in the build.

enable_compute_pressure
    Current value (from the default) = true
      From //services/device/public/cpp/compute_pressure/buildflags.gni:12

enable_concurrent_basic_print_dialogs
    Current value (from the default) = true
      From //printing/buildflags/buildflags.gni:47

enable_cros_libassistant
    Current value (from the default) = false
      From //chromeos/ash/components/assistant/assistant.gni:6

    Enable assistant implementation based on libassistant.

enable_cros_media_app
    Current value (from the default) = false
      From //ash/webui/media_app_ui/media_app_ui.gni:7

    Whether to enable the "real" ChromeOS Media App. When false, a mock app is
    bundled for testing integration points.

enable_dangling_raw_ptr_checks
    Current value (from the default) = true
      From //base/allocator/partition_allocator/partition_alloc.gni:231

enable_dangling_raw_ptr_feature_flag
    Current value (from the default) = true
      From //base/allocator/partition_allocator/partition_alloc.gni:249

    Enable the feature flag required to check for dangling pointers. That is to
    say `PartitionAllocDanglingPtr`.
   
    This is meant to be modified primarily on bots. It is much easier to
    override the feature flags using a binary flag instead of updating multiple
    bots's scripts to pass command line arguments.
   
    TODO(328104161): Remove this flag.

enable_dav1d_decoder
    Current value (from the default) = true
      From //media/media_options.gni:108

enable_desktop_android_extensions
    Current value (from the default) = false
      From //extensions/buildflags/buildflags.gni:30

    `enable_desktop_android_extensions` is an experimental flag used in
    prototypes of desktop-focused android-powered builds. This is very much
    in-development, non-stable, and likely to crash at any given moment.
   
    Introducing a separate flag like this has the unfortunate effect of leading
    to a lot of `if BUILDFLAG(ENABLE_EXTENSIONS)` checks in extensions code
    itself, since those checks are instead the equivalent of
    `if BUILDFLAG(ENABLE_FULL_EXTENSIONS_SYSTEM)`. However, we don't want to
    change the stable, production-utilized `enable_extensions` flag for this
    experimental build.
   
    As the experimental build progresses, there should be fewer of those
    checks littered around the extensions codebase, since more and more of
    the extensions code will be included in the desktop android variant.
   
    TODO(https://crbug.com/356905053): Continue expanding the scope of
    enable_desktop_android_extensions.

enable_device_bound_sessions
    Current value (from the default) = false
      From //net/features.gni:59

    DBSC is only supported on windows for now

enable_discovery
    Current value (from the default) = false
      From //components/sharing_message/buildflags.gni:6

enable_downgrade_processing
    Current value (from the default) = true
      From //chrome/browser/downgrade/buildflags.gni:9

enable_downstream_media_tests
    Current value (from the default) = false
      From //chrome/test/media_router/BUILD.gn:10

    Many of the targets defined in this file have dependencies that cannot be
    satisfied without additional downstream resources. Explicitly guard them
    them behind this flag so that we do not attempt to build or isolate targets
    in public chromium checkouts.

enable_dsyms
    Current value (from the default) = false
      From //build/config/apple/symbols.gni:17

    Produce dSYM files for targets that are configured to do so. dSYM
    generation is controlled globally as it is a linker output (produced via
    the //build/toolchain/apple/linker_driver.py. Enabling this will result in
    all shared library, loadable module, and executable targets having a dSYM
    generated.

enable_enterprise_companion
    Current value (from the default) = true
      From //chrome/enterprise_companion/buildflags.gni:7

enable_expensive_dchecks
    Current value (from the default) = true
      From //build/config/dcheck_always_on.gni:33

enable_extensions
    Current value (from the default) = true
      From //extensions/buildflags/buildflags.gni:11

    `enable_extensions` controls whether the full and stable extensions platform
    is compiled.

enable_extensions_core
    Current value (from the default) = true
      From //extensions/buildflags/buildflags.gni:52

enable_extractors
    Current value (from the default) = true
      From //chrome/services/file_util/public/features.gni:11

    Whether the file_util service supports .TAR.XZ and .TAR file extraction.
    Currently only used by imageWriterPrivate extension API, so only enabled
    when Extensions are enabled.

enable_fake_assistant_microphone
    Current value (from the default) = false
      From //chromeos/ash/components/assistant/assistant.gni:10

    Enable a fake microphone, which can replay audio files as microphone input.
    See chromeos/ash/components/assistant/tools/send-audio.sh

enable_ffmpeg_video_decoders
    Current value (from the default) = true
      From //media/media_options.gni:225

enable_full_stack_frames_for_profiling
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:69

    Compile in such a way as to make it possible for the profiler to unwind full
    stack frames. Setting this flag has a large effect on the performance of the
    generated code than just setting profiling, but gives the profiler more
    information to analyze.
    Requires profiling to be set to true.

enable_fuzztest_fuzz
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:164

enable_gpu_client_logging
    Current value (from the default) = false
      From //gpu/command_buffer/client/BUILD.gn:14

    Enable GPU client logging without DCHECK being on.

enable_gpu_service_logging
    Current value (from the default) = false
      From //ui/gl/BUILD.gn:20

    Whether service side logging (actual calls into the GL driver) is enabled
    or not.

enable_grpc_ares
    Current value (from the default) = false
      From //third_party/grpc/BUILD.gn:9

    Compiles with ares.

enable_guest_view
    Current value (from the default) = true
      From //extensions/buildflags/buildflags.gni:38

    A separate control for whether GuestView (and corresponding elements
    such as WebView, ExtensionOptionsView, etc) are enabled.

enable_gwp_asan
    Current value (from the default) = true
      From //components/gwp_asan/buildflags/buildflags.gni:27

    Convenience definition

enable_gwp_asan_malloc
    Current value (from the default) = true
      From //components/gwp_asan/buildflags/buildflags.gni:21

    Is GWP-ASan malloc/PartitionAlloc hooking enabled for chrome/ on a given
    platform.

enable_gwp_asan_partitionalloc
    Current value (from the default) = true
      From //components/gwp_asan/buildflags/buildflags.gni:22

enable_hangout_services_extension
    Current value (from the default) = false
      From //chrome/common/features.gni:52

    Hangout services is an extension that adds extra features to Hangouts.
    It is enableable separately to facilitate testing.

enable_hevc_parser_and_hw_decoder
    Current value (from the default) = false
      From //media/media_options.gni:121

enable_hidpi
    Current value (from the default) = true
      From //ui/base/ui_features.gni:33

enable_hls_demuxer
    Current value (from the default) = false
      From //media/media_options.gni:115

    Enable HLS manifest parser and demuxer.

enable_ink
    Current value (from the default) = false
      From //pdf/features.gni:22

    Enable ink libraries provided by the ChromeOS media app dependency.
   
    This argument indicates whether the ink libraries provided by the ChromeOS
    media app dependency is enabled. It also determines whether the annotation
    feature is enabled for the PDF Viewer on Chrome OS.

enable_ipc_fuzzer
    Current value (from the default) = false
      From //tools/ipc_fuzzer/ipc_fuzzer.gni:14

    Build IPC fuzzer by default if it's a supported configuration. For
    sanitizer builds, this needs to be enabled explicitly as they can be slow
    (especially MSan).

enable_ipc_logging
    Current value (from the default) = true
      From //ipc/features.gni:7

    Enabling debug builds automatically sets enable_ipc_logging to true.

enable_iterator_debugging
    Current value (from the default) = false
      From //build/config/c++/c++.gni:40

    When set, enables libc++ debug mode with iterator debugging.
   
    Iterator debugging is generally useful for catching bugs. But it can
    introduce extra locking to check the state of an iterator against the state
    of the current object. For iterator- and thread-heavy code, this can
    significantly slow execution - two orders of magnitude slowdown has been
    seen (crbug.com/903553) and iterator debugging also slows builds by making
    generation of snapshot_blob.bin take ~40-60 s longer. Therefore this
    defaults to off.

enable_jni_multiplexing
    Current value (from the default) = false
      From //third_party/jni_zero/jni_zero.gni:21

enable_js_protobuf
    Current value (from the default) = true
      From //third_party/protobuf/proto_library.gni:147

    Allows subprojects to omit javascript dependencies (e.g.) closure_compiler
    and google-closure-library.

enable_jxl_decoder
    Current value (from the default) = true
      From //third_party/blink/public/public_features.gni:9

    If true, adds support for JPEG XL image decoding.

enable_kythe_annotations
    Current value (from the default) = false
      From //build/toolchain/kythe.gni:10

    Enables Kythe annotations necessary to build cross references.

enable_lens_desktop
    Current value (from the default) = true
      From //components/lens/features.gni:15

    Includes Lens features in the build. toolkit_views is used to ensure Lens
    features are only included on Desktop devices running Chromium

enable_lens_desktop_google_branded_features
    Current value (from the default) = false
      From //components/lens/features.gni:25

enable_libaom
    Current value (from the default) = true
      From //third_party/libaom/options.gni:7

    Enable encoding and decoding AV1 video files.

enable_library_cdms
    Current value (from the default) = true
      From //media/media_options.gni:233

    Enables the use of library CDMs that implements the interface defined at
    media/cdm/api/content_decryption_module.h. If true, the actually library CDM
    will be hosted in the mojo CDM service running in the CDM (utility) process.
    Used for all desktop platforms.

enable_linux_installer
    Current value (from the default) = false
      From //chrome/installer/installers.gni:10

enable_log_error_not_reached
    Current value (from the default) = false
      From //build/config/logging.gni:12

enable_logging_override
    Current value (from the default) = false
      From //media/media_options.gni:106

    Enable logging override, e.g. enable DVLOGs through level 2 at build time.
    On Cast devices, these are logged as INFO.
    When enabled on Fuchsia, these are logged as VLOGs.

enable_mdns
    Current value (from the default) = true
      From //net/features.gni:33

    Multicast DNS.

enable_media_control_logging_override
    Current value (from the default) = false
      From //components/media_control/renderer/BUILD.gn:9

enable_media_drm_storage
    Current value (from the default) = false
      From //media/media_options.gni:112

    Enable browser managed persistent metadata storage for EME persistent
    session and persistent usage record session.

enable_media_foundation_widevine_cdm
    Current value (from the default) = false
      From //third_party/widevine/cdm/widevine.gni:51

enable_media_remoting
    Current value (from the default) = true
      From //media/media_options.gni:328

    This switch defines whether the Media Remoting implementation will be built.
    When enabled, media is allowed to be renderer and played back on remote
    devices when the tab is being casted and other conditions are met.

enable_media_remoting_rpc
    Current value (from the default) = true
      From //media/media_options.gni:334

    Media Remoting RPC is disabled on Android since it's unused but increases
    the native binary size by ~70Kb.

enable_merge_request
    Current value (from the default) = false
      From //chromeos/components/libsegmentation/buildflags.gni:7

    Request to merge features.

enable_message_center
    Current value (from the default) = true
      From //ui/base/ui_features.gni:31

enable_ml_internal
    Current value (from the default) = false
      From //services/on_device_model/on_device_model.gni:12

enable_modular_updater
    Current value (from the default) = false
      From //build/config/cast.gni:19

    Set true to enable modular_updater.

enable_mojo_tracing
    Current value (from the default) = false
      From //mojo/public/cpp/bindings/BUILD.gn:13

enable_mojom_fuzzer
    Current value (from the default) = false
      From //mojo/public/tools/bindings/mojom.gni:50

    Enables generating javascript fuzzing-related code and the bindings for the
    MojoLPM fuzzer targets. Off by default.

enable_mojom_message_id_scrambling
    Current value (from the default) = false
      From //mojo/public/tools/bindings/mojom.gni:46

    Controls message ID scrambling behavior. If |true|, message IDs are
    scrambled (i.e. randomized based on the contents of //chrome/VERSION) on
    non-Chrome OS desktop platforms. Enabled on official builds by default.
    Set to |true| to enable message ID scrambling on a specific build.
    See also `enable_scrambled_message_ids` below for more details.

enable_mojom_typemapping
    Current value (from the default) = true
      From //mojo/public/tools/bindings/mojom.gni:39

    Indicates whether typemapping should be supported in this build
    configuration. This may be disabled when building external projects which
    depend on //mojo but which do not need/want all of the Chromium tree
    dependencies that come with typemapping.
   
    Note that (perhaps obviously) a huge amount of Chromium code will not build
    with typemapping disabled, so it is never valid to set this to |false| in
    any Chromium build configuration.

enable_mse_mpeg2ts_stream_parser
    Current value (from the default) = false
      From //media/media_options.gni:144

enable_mutex_priority_inheritance
    Current value (from the default) = false
      From //base/BUILD.gn:73

    Set to true to enable mutex priority inheritance. See the comments in
    LockImpl::PriorityInheritanceAvailable() in lock_impl_posix.cc for the
    platform requirements to safely enable priority inheritance.

enable_nacl
    Current value (from the default) = false
      From //components/nacl/features.gni:26

    Enables Native Client support.
   
    NaCl is only supported on ChromeOS.

enable_nocompile_tests
    Current value (from the default) = true
      From //build/nocompile.gni:58

enable_offline_pages
    Current value (from the default) = false
      From //components/offline_pages/buildflags/features.gni:8

    Whether to enable OfflinePages support. Currently user-visible features
    are Android-only.

enable_offline_pages_harness
    Current value (from the default) = false
      From //components/offline_pages/buildflags/features.gni:12

    This enables test API for locally-built harness which is used for quality
    evaluations. Requires setting this variable manually at local environment.

enable_oop_basic_print_dialog
    Current value (from the default) = false
      From //printing/buildflags/buildflags.gni:54

    Enables the printing system dialog being invoked from out-of-process for
    platforms that support printing, have a system dialog, and which can invoke
    that system print dialog from a process other than the browser process.
    TODO(crbug.com/40561724)  Determine if Linux Wayland can be made to have a
    system dialog be modal against an application window in the browser process.

enable_oop_printing
    Current value (from the default) = true
      From //printing/buildflags/buildflags.gni:43

    Enables out-of-process printing.  Do not have this definition just be
    based on `enable_print_preview`; this feature could still be appropriate
    for some build configurations which explicitly disable print preview.

enable_oop_printing_no_oop_basic_print_dialog
    Current value (from the default) = true
      From //printing/buildflags/buildflags.gni:60

enable_opengl_apitrace
    Current value (from the default) = false
      From //build/config/ozone.gni:34

    Enable explicit apitrace (https://apitrace.github.io) loading.
    This requires apitrace library with additional bindings.
    See ChromeOS package for details:
    https://chromium-review.googlesource.com/c/chromiumos/overlays/chromiumos-overlay/+/2659419
    Chrome will not start without an apitrace.so library.
    Trace will be saved to /tmp/gltrace.dat file by default. You can
    override it at run time with TRACE_FILE=<path> environment variable.

enable_openscreen_protocol
    Current value (from the default) = false
      From //chrome/browser/media/router/BUILD.gn:15

    Set to true to build code that supports the Open Screen Protocol.
    OSP is experimental and not yet feature-complete.

enable_openxr
    Current value (from the default) = false
      From //device/vr/buildflags/buildflags.gni:27

    To build with OpenXR support, the OpenXR Loader needs to be pulled to
    third_party/openxr.

enable_paint_preview
    Current value (from the default) = true
      From //build/config/buildflags_paint_preview.gni:15

    Enable basic paint preview support. Does not work on iOS. Should
    not be included with Chromecast hardware devices.
    Used by //components/paint_preview and //third_party/harfbuzz-ng.
    TODO(crbug.com/webrtc/11223) Move back this file in
    //components/paint_preview/ once WebRTC doesn't roll harfbuzz-ng anymore,
    for consistency sake.

enable_pdf
    Current value (from the default) = true
      From //pdf/features.gni:13

enable_pdf_ink2
    Current value (from the default) = true
      From //pdf/features.gni:26

    Enable the next generation of ink libraries. This can co-exist with
    `enable_ink` above.

enable_pdf_ink2_stubs
    Current value (from the default) = true
      From //pdf/features.gni:29

    Enable Ink Stubs. Only applicable when `enable_pdf_ink2` is true.

enable_perfetto_benchmarks
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:199

enable_perfetto_fuzzers
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:202

enable_perfetto_grpc
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:336

    Enables gRPC in the Perfetto codebase. gRPC significantly increases build
    times and the general footprint of Perfetto. As it only required for
    BigTrace and even then only to build the final ready-to-ship binary, don't
    enable this by default.

enable_perfetto_heapprofd
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:161

enable_perfetto_integration_tests
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:197

enable_perfetto_ipc
    Current value (from the default) = true
      From //third_party/perfetto/gn/perfetto.gni:154

enable_perfetto_llvm_demangle
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:330

enable_perfetto_merged_protos_check
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:358

    Check that the merged perfetto_trace.proto can be translated to a C++ lite
    proto and compiled. This is disabled by default because it's expensive (it
    can take a couple of minutes).

enable_perfetto_platform_services
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:145

enable_perfetto_site
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:353

    Allows to build the perfetto.dev website.
    WARNING: if this flag is enabled, the build performs globbing at generation
    time. Incremental builds that add/remove files will not be supported without
    rerunning gn.

enable_perfetto_stderr_crash_dump
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:239

enable_perfetto_system_consumer
    Current value (from the default) = true
      From //third_party/perfetto/gn/perfetto.gni:255

enable_perfetto_tools
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:191

enable_perfetto_trace_processor
    Current value (from the default) = true
      From //third_party/perfetto/gn/perfetto.gni:177

enable_perfetto_trace_processor_httpd
    Current value (from the default) = true
      From //third_party/perfetto/gn/perfetto.gni:314

enable_perfetto_trace_processor_json
    Current value (from the default) = true
      From //third_party/perfetto/gn/perfetto.gni:299

enable_perfetto_trace_processor_linenoise
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:293

enable_perfetto_trace_processor_mac_instruments
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:305

enable_perfetto_trace_processor_percentile
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:288

enable_perfetto_trace_processor_sqlite
    Current value (from the default) = true
      From //third_party/perfetto/gn/perfetto.gni:283

enable_perfetto_traceconv
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:342

enable_perfetto_traced_perf
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:169

enable_perfetto_traced_probes
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:271

    The traced_probes daemon is very Linux-specific, as it depends on ftrace and
    various /proc interfaces. There is no point making its code platform-neutral
    as it won't do anything useful on Windows.
    The only reason why we still build it on Mac OS is to be able to run the
    unittests there and making dev on mac less cumbersome. The traced_probes
    code happens to build cleanly and for now the mainteinance cost on Mac is
    extremely low.

enable_perfetto_traced_relay
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:275

    The relay service is enabled when platform services are enabled.
    TODO(chinglinyu) check if we can enable on Windows.

enable_perfetto_ui
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:346

enable_perfetto_unittests
    Current value (from the default) = true
      From //third_party/perfetto/gn/perfetto.gni:193

enable_perfetto_version_gen
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:208

enable_perfetto_watchdog
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:186

enable_perfetto_x64_cpu_opt
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:247

enable_perfetto_zlib
    Current value (from the default) = true
      From //third_party/perfetto/gn/perfetto.gni:322

enable_pkeys
    Current value (from the default) = true
      From //base/allocator/partition_allocator/partition_alloc.gni:396

enable_platform_ac3_eac3_audio
    Current value (from the default) = false
      From //media/media_options.gni:71

    Enables AC3/EAC3 audio handling in chromium. This includes demuxing,
    on-device decoding and bitstream passthrough as supported by device.

enable_platform_ac4_audio
    Current value (from the default) = false
      From //media/media_options.gni:75

    Enables AC4 audio handling in chromium. This includes demuxing,
    on-device decoding and bitstream passthrough as supported by device.

enable_platform_apps
    Current value (from the default) = true
      From //extensions/buildflags/buildflags.gni:45

    A control for whether support for platform apps should be compiled into the
    browser.
    TODO(https://crbug.com/41407868): This doesn't belong here; extensions code
    shouldn't rely on platform apps at all. But at least this lets it be
    toggled / if-def'd.

enable_platform_dolby_vision
    Current value (from the default) = false
      From //media/media_options.gni:94

enable_platform_dts_audio
    Current value (from the default) = false
      From //media/media_options.gni:81

    Enables DTS/DTSX audio handling in chromium. This includes demuxing,
    on-device decoding and bitstream passthrough as supported by device.

enable_platform_encrypted_dolby_vision
    Current value (from the default) = false
      From //media/media_options.gni:101

    Enable platform support of encrypted Dolby Vision. The actual support
    depends on platform capability and is controlled by the run time feature
    kPlatformEncryptedDolbyVision. Clear Dolby Vision is not supported by
    default, unless overwritten by the run time feature
    kAllowClearDolbyVisionInMseWhenPlatformEncryptedDvEnabled.

enable_platform_experience
    Current value (from the default) = false
      From //chrome/browser/buildflags.gni:9

    By default, only branded builds allow for platform experience.

enable_platform_hevc
    Current value (from the default) = false
      From //media/media_options.gni:140

enable_platform_iamf_audio
    Current value (from the default) = false
      From //media/media_options.gni:85

    Enables IAMF audio handling in chromium. This includes demuxing,
    on-device decoding and bitstream passthrough as supported by device.

enable_platform_mpeg_h_audio
    Current value (from the default) = false
      From //media/media_options.gni:77

enable_platform_vvc
    Current value (from the default) = false
      From //media/media_options.gni:126

    Enable inclusion of VVC/H.266 parser/demuxer, and also enable VVC/H.266 decoding
    with hardware acceleration provided by platform. Disabled by default for all builds.

enable_plugins
    Current value (from the default) = true
      From //ppapi/buildflags/buildflags.gni:15

    Enables basic plugin support. This enables support for registering and
    looking up plugins, but does not include support for loading plugins using a
    specific technology like Pepper.
   
    In particular, the PDF viewer (enable_pdf) requires plugin support, but it
    does not require Pepper support (enable_ppapi).

enable_pointer_arithmetic_trait_check
    Current value (from the default) = true
      From //base/allocator/partition_allocator/partition_alloc.gni:143

    Enables a compile-time check that all raw_ptrs to which arithmetic
    operations are to be applied are annotated with the AllowPtrArithmetic
    trait,

enable_pointer_compression_support
    Current value (from the default) = false
      From //base/allocator/partition_allocator/partition_alloc.gni:134

    Introduces pointer compression support in PA. These are 4-byte
    pointers that can point within the core pools (regular and BRP).
   
    This is effective only for memory allocated from PartitionAlloc, so it is
    recommended to enable PA-E above, but isn't strictly necessary. Embedders
    can create and use PA partitions explicitly.

enable_pointer_subtraction_check
    Current value (from the default) = false
      From //base/allocator/partition_allocator/partition_alloc.gni:138

    Enables a bounds check when two pointers (at least one being raw_ptr) are
    subtracted (if supported by the underlying implementation).

enable_ppapi
    Current value (from the default) = false
      From //ppapi/buildflags/buildflags.gni:22

    Enables Pepper API (PPAPI) plugin support.
    The only remaining PPAPI plugin supported is NaCl and if is disabled
    we can disable PPAPI.

enable_precompiled_headers
    Current value (from the default) = false
      From //build/config/pch.gni:14

enable_print_media_l10n
    Current value (from the default) = false
      From //chrome/common/printing/BUILD.gn:16

    Enable print media localization only on the platforms that support CUPS IPP
    (ChromeOS and macOS for now). The localization expects media vendor IDs
    uniquely generated by CUPS IPP.

enable_print_preview
    Current value (from the default) = true
      From //printing/buildflags/buildflags.gni:26

    Enables printing with print preview.
    Print preview requires PDF per //printing/BUILD.gn.
    The is_android condition is currently redundant but left for clarity.

enable_printing
    Current value (from the default) = true
      From //printing/buildflags/buildflags.gni:14

    Enables printing support.

enable_printing_tests
    Current value (from the default) = false
      From //printing/buildflags/buildflags.gni:19

    TODO(crbug.com/40263786): iOS blink port only enables printing_tests to run
    unit tests and web tests for now because the port does not enable the
    printing feature yet.

enable_profiling
    Current value (from the default) = false
      From //build/config/compiler/compiler.gni:69

    Compile in such a way as to enable profiling of the generated code. For
    example, don't omit the frame pointer and leave in symbols.

enable_pseudolocales
    Current value (from the default) = true
      From //build/config/locales.gni:243

    We want to give pseudolocales to everyone except end-users (devs & QA).
    Note that this only packages the locales in, and doesn't add the ui to enable them.

enable_qr_print
    Current value (from the default) = false
      From //components/qr_code_generator/BUILD.gn:11

    Enables building a development / debugging binary.

enable_random_mojo_delays
    Current value (from the default) = false
      From //mojo/public/cpp/bindings/BUILD.gn:19

    enable_random_mojo_delays starts a task runner that periodically pauses
    random Mojo bindings and later resumes them, in order to test whether parts
    of the code implicitly rely on FIFO processing of messages sent on different
    message pipes (which they should not).

enable_reading_list
    Current value (from the default) = true
      From //components/reading_list/features/reading_list.gni:8

    Controls whether reading list support is active or not. Currently only
    supported on iOS (on other platforms, the feature is always disabled).

enable_remoting
    Current value (from the default) = true
      From //remoting/remoting_enable.gni:13

enable_reporting
    Current value (from the default) = true
      From //net/features.gni:36

    Reporting not used on iOS.

enable_request_header_integrity
    Current value (from the default) = false
      From //chrome/browser/request_header_integrity/buildflags.gni:8

enable_resource_allowlist_generation
    Current value (from the default) = false
      From //build/toolchain/gcc_toolchain.gni:28

enable_rlz
    Current value (from the default) = false
      From //rlz/buildflags/buildflags.gni:13

enable_rust
    Current value (from the default) = true
      From //build/config/rust.gni:27

    Rust is available in the Chromium build but 3p repos that use //build may
    not use Rust and thus won't want to depend on having the Rust toolchain
    present, so this defaults to off in those cases.
   
    Chromium-based projects that are built for for architectures Chrome does not
    support may need to disable this as well, though they may need to replace
    code with C/C++ to get a functional product.

enable_rust_base_conversions
    Current value (from the default) = true
      From //build/config/rust.gni:108

    Conversions between Rust types and C++ types.

enable_rust_crash
    Current value (from the default) = true
      From //build/config/rust.gni:114

    Support for chrome://crash-rust to check crash dump collection works.

enable_rust_cxx
    Current value (from the default) = true
      From //build/config/rust.gni:32

    The CXX tool is in //third_party/rust which is not shared with downstream
    projects yet. So they need to copy the required dependencies and GN files
    into their project to enable CXX there.

enable_rust_gtest_interop
    Current value (from the default) = true
      From //build/config/rust.gni:120

    Rust gtest interop.

enable_rust_json
    Current value (from the default) = true
      From //build/config/rust.gni:111

    The base::JSONReader implementation. Requires base conversions.

enable_rust_mojo
    Current value (from the default) = false
      From //build/config/rust.gni:117

    Support for Rust mojo bindings.

enable_rust_mojom_bindings
    Current value (from the default) = false
      From //mojo/public/tools/bindings/mojom.gni:54

    Output Rust mojom bindings when `generate_rust` is `true` for a target. The
    option has no effect if this flag is disabled.

enable_rust_png
    Current value (from the default) = false
      From //build/config/rust.gni:127

    WIP attempt to replace `libpng` with Rust `png` crate.
   
    TODO(https://crbug.com/360375227): Remove the `enable_all_rust_features`
    condition below (only true on Rust bots) once/if ready to start A/B
    experiments.

enable_screen_ai_browsertests
    Current value (from the default) = true
      From //services/screen_ai/buildflags/features.gni:15

enable_screen_ai_service
    Current value (from the default) = true
      From //services/screen_ai/buildflags/features.gni:10

    Screen AI service is only supported on desktop platforms.

enable_segment_heap
    Current value (from the default) = false
      From //build/config/win/manifest.gni:46

enable_server_based_recognition
    Current value (from the default) = false
      From //chrome/services/speech/buildflags/buildflags.gni:28

    Whether the server based speech recognition recognizer is available.
    Currently only available in official builds for ash ChromeOS.

enable_service_discovery
    Current value (from the default) = true
      From //chrome/common/features.gni:54

enable_session_service
    Current value (from the default) = true
      From //chrome/common/features.gni:58

    Enables use of the session service, which is enabled by default.
    Android stores them separately on the Java side.

enable_shadow_call_stack
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:191

    Enable ShadowCallStack for compiled binaries. SCS stores a pointer to a
    shadow call stack in register x18. Hence, x18 must not be used by the OS
    or libraries. We assume that to be the case for high end Android
    configurations. For more details see
    https://clang.llvm.org/docs/ShadowCallStack.html

enable_shadow_metadata
    Current value (from the default) = false
      From //base/allocator/partition_allocator/partition_alloc.gni:260

    Shadow metadata is still under development and only supports Linux
    for now.

enable_skia_graphite_gtests
    Current value (from the default) = false
      From //skia/features.gni:21

    Enable gtests using SkiaRenderer on Skia Graphite.

enable_soda_integration_tests
    Current value (from the default) = false
      From //components/soda/buildflags.gni:9

    Used to enable the Speech On-Device API (SODA) in unit and browser tests.
    This affects production code on some platforms and should not be enabled in
    official builds.

enable_speech_service
    Current value (from the default) = true
      From //chrome/services/speech/buildflags/buildflags.gni:12

    Whether the browser provides a speech recognition service
    (//media/mojo/mojom/speech_recognition_service.mojom) to the renderer.
    TODO(crbug.com/40244098) Enable on Fuchsia.

enable_stack_trace_line_numbers
    Current value (from the default) = true
      From //build/config/logging.gni:23

    Enables the DWARF line number reader on Linux. This only has an effect if
    print_unsymbolized_stack_traces is false.

enable_stripping
    Current value (from the default) = false
      From //build/config/apple/symbols.gni:24

    Strip symbols from linked targets by default. If this is enabled, the
    //build/config/apple:strip_all config will be applied to all linked targets.
    If custom stripping parameters are required, remove that config from a
    linked target and apply custom -Wcrl,strip flags. See
    //build/toolchain/apple/linker_driver.py for more information.

enable_supervised_users
    Current value (from the default) = true
      From //components/supervised_user/buildflags.gni:9

    Platforms which fully support supervision features:

enable_swiftshader
    Current value (from the default) = true
      From //ui/gl/features.gni:29

enable_swiftshader_vulkan
    Current value (from the default) = true
      From //gpu/vulkan/features.gni:16

    Enable swiftshader vulkan. Disabling it can save build time, however
    --use-vulkan=swiftshader and some tests which use swiftshader vulkan will
    not work.

enable_trace_logging
    Current value (from the default) = true
      From //third_party/openscreen/src/util/BUILD.gn:13

    Enables trace logging in build. This is true by default, but may be disabled
    for a slight performance increase.

enable_update_notifications
    Current value (from the default) = false
      From //chrome/browser/buildflags.gni:16

    Detect updates and notify the user for Google Chrome across all platforms.
    Chromium does not use an auto-updater.

enable_updater
    Current value (from the default) = false
      From //chrome/browser/buildflags.gni:12

    By default, only branded builds integrate with automatic updates.

enable_validating_command_decoder
    Current value (from the default) = false
      From //ui/gl/features.gni:24

enable_vectorized_html_scanning
    Current value (from the default) = false
      From //third_party/blink/renderer/core/BUILD.gn:105

    Use vectorization for fast path HTML parser.

enable_video_effects
    Current value (from the default) = true
      From //services/video_effects/args.gni:6

enable_vr
    Current value (from the default) = true
      From //device/vr/buildflags/buildflags.gni:35

enable_vulkan
    Current value (from the default) = true
      From //gpu/vulkan/features.gni:11

    Enable experimental vulkan backend.

enable_websockets
    Current value (from the default) = true
      From //net/features.gni:15

    WebSockets and socket stream code are not used when blink is not used
    and are optional in cronet.

enable_webui_certificate_viewer
    Current value (from the default) = true
      From //chrome/common/features.gni:61

    Enables the webui certificate viewer dialog.

enable_webui_inline_sourcemaps
    Current value (from the default) = false
      From //ui/webui/webui_features.gni:19

    Whether to inline source maps during build. Cannot be enabled when
    `optimize_webui=true`.

enable_webui_tab_strip
    Current value (from the default) = true
      From //ui/webui/webui_features.gni:15

    Enable the WebUI version of the browser's tab strip.

enable_widevine
    Current value (from the default) = true
      From //third_party/widevine/cdm/widevine.gni:15

    Enables Widevine key system support. Enabled by default in Google Chrome,
    Google Chrome for Testing and Android. For Fuchsia, see crbug.com/1354347.
    Can be optionally enabled in Chromium on non-Android platforms. Please see
    //src/third_party/widevine/LICENSE file for details.

enable_widevine_cdm_host_verification
    Current value (from the default) = false
      From //third_party/widevine/cdm/widevine.gni:70

enterprise_client_certificates
    Current value (from the default) = true
      From //components/enterprise/buildflags/buildflags.gni:25

    Indicates support for client certificates provisioning.

enterprise_cloud_content_analysis
    Current value (from the default) = true
      From //components/enterprise/buildflags/buildflags.gni:14

enterprise_content_analysis
    Current value (from the default) = true
      From //components/enterprise/buildflags/buildflags.gni:40

enterprise_data_controls
    Current value (from the default) = true
      From //components/enterprise/buildflags/buildflags.gni:22

enterprise_local_content_analysis
    Current value (from the default) = true
      From //components/enterprise/buildflags/buildflags.gni:18

    Indicates support for content analysis against a cloud agent for Enterprise
    Connector policies.

enterprise_screenshot_protection
    Current value (from the default) = false
      From //components/enterprise/buildflags/buildflags.gni:31

enterprise_watermark
    Current value (from the default) = true
      From //components/enterprise/buildflags/buildflags.gni:29

exclude_unwind_tables
    Current value (from the default) = false
      From //build/config/compiler/compiler.gni:117

    Exclude unwind tables by default for official builds as unwinding can be
    done from stack dumps produced by Crashpad at a later time "offline" in the
    crash server. Since this increases binary size, we don't recommend including
    them in shipping builds.
    For unofficial (e.g. development) builds and non-Chrome branded (e.g. Cronet
    which doesn't use Crashpad, crbug.com/479283) builds it's useful to be able
    to unwind at runtime.
    Include the unwind tables on Android even for official builds, as otherwise
    the crash dumps generated by Android's debuggerd are largely useless, and
    having this additional mechanism to understand issues is particularly helpful
    to WebView.

extended_tracing_enabled
    Current value (from the default) = false
      From //base/trace_event/tracing.gni:11

    Enable more trace events. Disabled by default due to binary size impact,
    but highly recommended for local development.

extra_sysroot_libs
    Current value (from the default) = []
      From //build/config/rust.gni:94

    Non-rlib libs provided in the toolchain sysroot. Usually this is empty, but
    e.g. the Android Rust Toolchain provides a libunwind.a that rustc expects.

fail_on_san_warnings
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:256

    When true, sanitizer warnings will cause test case failures.

fatal_linker_warnings
    Current value (from the default) = true
      From //build/config/compiler/BUILD.gn:73

    Enable fatal linker warnings. Building Chromium with certain versions
    of binutils can cause linker warning.

ffmpeg_branding
    Current value (from the default) = "Chromium"
      From //third_party/ffmpeg/ffmpeg_options.gni:34

    Controls whether we build the Chromium or Google Chrome version of FFmpeg.
    The Google Chrome version contains additional codecs. Typical values are
    Chromium, Chrome, and ChromeOS.

ffmpeg_use_unsafe_atomics
    Current value (from the default) = false
      From //third_party/ffmpeg/ffmpeg_options.gni:52

    Set to true to force the use of ffmpeg's stdatomic fallback code. This code
    is unsafe and does not implement atomics properly. https://crbug.com/161723.
   
    Windows and GCC prior to 4.9 lack stdatomic.h.
   
    This is also useful for developers who use icecc, which relies upon
    clang's -frewrite-includes flag which is broken with #include_next
    directives as used in chromium's clang stdatomic.h.
    Some background: https://bugs.llvm.org/show_bug.cgi?id=26828

forbid_non_component_debug_builds
    Current value (from the default) = true
      From //build/config/compiler/compiler.gni:104

    Whether an error should be raised on attempts to make debug builds with
    is_component_build=false. Very large debug symbols can have unwanted side
    effects so this is enforced by default for chromium.

force_cast_bluetooth
    Current value (from the default) = false
      From //device/bluetooth/cast_bluetooth.gni:4

force_enable_fieldtrial_testing_config
    Current value (from the default) = false
      From //components/variations/service/BUILD.gn:19

    Set to true to make a build that force enables activation of field trial
    tests specified in testing/variations/fieldtrial_testing_config.json.

force_enable_raw_ptr_exclusion
    Current value (from the default) = false
      From //base/allocator/partition_allocator/partition_alloc.gni:167

    RAW_PTR_EXCLUSION macro is disabled on official builds because it increased
    binary size. This flag can be used to enable it for official builds too.

force_rustc_color_output
    Current value (from the default) = false
      From //build/config/rust.gni:99

    Force-enable `--color=always` for rustc, even when it would be disabled for
    a platform. Mostly applicable to Windows, where new versions can handle ANSI
    escape sequences but it's not reliable in general.

forward_through_malloc
    Current value (from the default) = false
      From //base/allocator/partition_allocator/partition_alloc.gni:148

    Forwards all the allocation/freeing calls in shim (e.g. operator new)
    through malloc. Useful for using with tools that intercept malloc, e.g.
    heaptrack.

gcc_target_rpath
    Current value (from the default) = ""
      From //build/config/gcc/BUILD.gn:19

    When non empty, overrides the target rpath value. This allows a user to
    make a Chromium build where binaries and shared libraries are meant to be
    installed into separate directories, like /usr/bin/chromium and
    /usr/lib/chromium for instance. It is useful when a build system that
    generates a whole target root filesystem (like Yocto) is used on top of gn,
    especially when cross-compiling.
    Note: this gn arg is similar to gyp target_rpath generator flag.

generate_about_credits
    Current value (from the default) = false
      From //components/resources/BUILD.gn:16

    Generating the credits page requires a filesystem traversal for licenses
    that is slow in some environments.

generate_fuzzer_owners
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:260

    Generates an owners file for each fuzzer test.
    TODO(crbug.com/40175535): Remove this arg when finding OWNERS is faster.

generate_linker_map
    Current value (from the default) = false
      From //build/toolchain/toolchain.gni:27

    Used for binary size analysis.

glue_core_pools
    Current value (from the default) = true
      From //base/allocator/partition_allocator/partition_alloc.gni:126

    Puts the regular and BRP pools right next to each other, so that we can
    check "belongs to one of the two pools" with a single bitmask operation.
    TODO(crbug.com/350104111): Fix ios-simulator failures to remove `!is_ios`.

google_api_key
    Current value (from the default) = ""
      From //google_apis/BUILD.gn:43

    Set these to bake the specified API keys and OAuth client
    IDs/secrets into your build.
   
    If you create a build without values baked in, you can instead
    set environment variables to provide the keys at runtime (see
    src/google_apis/google_api_keys.h for details).  Features that
    require server-side APIs may fail to work if no keys are
    provided.
   
    Note that if `use_official_google_api_keys` has been set to true
    (explicitly or implicitly), these values will be ignored and the official
    keys will be used instead.

google_default_client_id
    Current value (from the default) = ""
      From //google_apis/BUILD.gn:46

    See google_api_key.

google_default_client_secret
    Current value (from the default) = ""
      From //google_apis/BUILD.gn:49

    See google_api_key.

grpc_use_static_linking
    Current value (from the default) = false
      From //third_party/grpc/BUILD.gn:18

gtest_enable_absl_printers
    Current value (from the default) = true
      From //build_overrides/build.gni:50

    Allows googletest to pretty-print various absl types.  Disabled for nacl due
    to lack of toolchain support.

gtk_version
    Current value (from the default) = 3
      From //build/config/linux/gtk/gtk.gni:13

    The (major) version of GTK to build against.  A different version may be
    loaded at runtime.

has_native_accessibility
    Current value (from the default) = true
      From //ui/base/ui_features.gni:19

has_platform_accessibility_support
    Current value (from the default) = false
      From //ui/base/ui_features.gni:27

    Whether the platform provide platform-specific accessibility implementation,
    i.e. there an accessibility API of some kind on this platform that's
    implemented in Chrome's browser process, but not necessarily something that
    looks like subclassing an interface - so that includes Android (the Java
    AccessibilityNodeProvider API) and Fuchsia (uses fidl messaging, kind of
    like mojo).

headless_enable_commands
    Current value (from the default) = true
      From //headless/headless.gni:11

    Enable support for --screenshot, --print-to-pdf and --dump-dom commands
    Note: this option is not available if |headless_use_embedded_resources|.

headless_mode_policy_supported
    Current value (from the default) = true
      From //headless/headless.gni:20

    Platforms where headless mode is supported.

headless_use_embedded_resources
    Current value (from the default) = false
      From //headless/headless.gni:7

    Embed resource.pak file into the binary for easier distribution.

headless_use_policy
    Current value (from the default) = true
      From //headless/headless.gni:17

    Use Policy component to manage preferences.

headless_use_prefs
    Current value (from the default) = true
      From //headless/headless.gni:14

    Use Prefs component to access Local State and other preferences.

high_end_fuzzer_targets
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:129

    When true, only builds fuzzer targets that require high end machines to run.
    Otherwise, builds all the targets.
    TODO(paulsemel): once we have everything implemented on the recipe side, we
    can change the behaviour for the false case, and only build the non high-end
    jobs, so that they do not appear in the zip. As for now, this behaviour
    ensures nothing breaks.

host_byteorder
    Current value (from the default) = "undefined"
      From //build/config/host_byteorder.gni:9

host_cpu
    Current value (from the default) = "x64"
      (Internally set; try `gn help host_cpu`.)

host_os
    Current value (from the default) = "linux"
      (Internally set; try `gn help host_os`.)

host_pkg_config
    Current value (from the default) = ""
      From //build/config/linux/pkg_config.gni:36

    A optional pkg-config wrapper to use for tools built on the host.

host_toolchain
    Current value (from the default) = ""
      From //build/config/BUILDCONFIG.gn:151

    This should not normally be set as a build argument.  It's here so that
    every toolchain can pass through the "global" value via toolchain_args().

icu_copy_icudata_to_root_build_dir
    Current value (from the default) = true
      From //third_party/icu/config.gni:32

    If set, the ":icudata" target will copy the ICU data to $root_build_dir.

icu_disable_thin_archive
    Current value (from the default) = false
      From //third_party/icu/config.gni:24

    If true, compile icu into a standalone static library. Currently this is
    only useful on Chrome OS.

icu_fuchsia_extra_compile_flags
    Current value (from the default) = []
      From //third_party/icu/config.gni:39

    Fuchsia sometimes requires extra compilation flags for ICU to adapt it to
    its current toolchain. Since it takes a while for ICU to roll through
    Fuchsia, it can take a long time from an ICU commit to a fix rolling into
    Fuchsia. This flag allows us to define the flag ahead of time in
    //build/icu.gni, and remove the rollout issues.

icu_fuchsia_extra_configs
    Current value (from the default) = []
      From //third_party/icu/config.gni:42

    Similar to above, except it allows adding an entire `config` target.

icu_fuchsia_override_data_dir
    Current value (from the default) = ""
      From //third_party/icu/config.gni:29

    If set to nonempty, this is the label of the directory to be used to pull
    the ICU data files content.  The setting has effect only when building
    inside the Fuchsia source tree.

icu_fuchsia_remove_configs
    Current value (from the default) = []
      From //third_party/icu/config.gni:46

    Similar to above, except it allows removing an entire `config` target, if
    it exists.

icu_use_data_file
    Current value (from the default) = true
      From //third_party/icu/config.gni:15

    Tells icu to load an external data file rather than rely on the icudata
    being linked directly into the binary.

icu_use_stub_data
    Current value (from the default) = true
      From //third_party/icu/config.gni:20

    If true, then this creates a stub data file. This should be disabled if
    a custom data file will be used instead, in order to avoid conflicting
    symbols.

ignore_missing_widevine_signing_cert
    Current value (from the default) = true
      From //third_party/widevine/cdm/widevine.gni:78

    If set, and Widevine CDM host verification signing failed due to no signing
    cert, the failure will be ignored. Otherwise the build process will fail.
    Set to false by default for official build to catch missing cert error.
    For developers building with "is_official_build" locally without Widevine
    signing certs, please manually set `ignore_missing_widevine_signing_cert`
    to true to suppress the error.

include_ash_ambient_animation_resources
    Current value (from the default) = false
      From //ash/ambient/resources/resources.gni:16

    Build flag to include resources for the animated screensaver in ash builds.
   
    Currently, these resources are included by default for internal ChromeOS
    builds as both conditions below are prerequisites for downloading Lottie
    ambient mode resources from CIPD in the DEPS file.
   
    May be overridden locally to false for testing purposes if desired.

include_both_v8_snapshots
    Current value (from the default) = false
      From //tools/v8_context_snapshot/v8_context_snapshot.gni:21

    If set, both snapshots are included. At this time, this only applicable to
    android. In other words, it will not work correctly on other platforms.
    Building the context snapshots on android requires building blink multiple
    times. To avoid impacting developer productivity the context snapshot is
    only built for official builds.

include_branded_entitlements
    Current value (from the default) = true
      From //chrome/BUILD.gn:74

    On macOS, `is_chrome_branded` builds that have been signed locally will not
    launch because certain entitlements are tied to the official Google code
    signing identity. If `include_branded_entitlements` is set to false, these
    entitlements will be skipped.

include_transport_security_state_preload_list
    Current value (from the default) = true
      From //net/features.gni:44

    Includes the transport security state preload list. This list includes
    mechanisms (e.g. HSTS, HPKP) to enforce trusted connections to a significant
    set of hardcoded domains. While this list has a several hundred KB of binary
    size footprint, this flag should not be disabled unless the embedder is
    willing to take the responsibility to make sure that all important
    connections use HTTPS.

incremental_install
    Current value (from the default) = false
      From //build/config/android/config.gni:12

    Build incremental targets whenever possible.
    See //build/android/incremental_install/README.md for more details.

init_stack_vars
    Current value (from the default) = true
      From //build/config/compiler/BUILD.gn:147

    Initialize all local variables with a pattern. This flag will fill
    uninitialized floating-point types (and 32-bit pointers) with 0xFF and the
    rest with 0xAA. This makes behavior of uninitialized memory bugs consistent,
    recognizable in the debugger, and crashes on memory accesses through
    uninitialized pointers.
   
    Flag discussion: https://crbug.com/977230
   
    TODO(crbug.com/40721698): This regresses binary size by ~1MB on Android and
    needs to be evaluated before enabling it there as well.

init_stack_vars_zero
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:151

    Zero init has favorable performance/size tradeoffs for Chrome OS
    but was not evaluated for other platforms.

install_prefix
    Current value (from the default) = ""
      From //third_party/angle/BUILD.gn:91

    Prefix where the artifacts should be installed on the system

ios_chrome_generate_order_file
    Current value (from the default) = false
      From //build/config/ios/config.gni:17

    Generate orderfile at application startup and then exit.
    NOTE: This flag adds runtime tooling to capture function call details,
    writes out an orderfile to the documents directory, then terminates the
    application. It should generally NOT be enabled.

ios_deployment_target
    Current value (from the default) = "17.4"
      From //build/config/ios/ios_sdk_overrides.gni:13

ios_stack_profiler_enabled
    Current value (from the default) = true
      From //base/BUILD.gn:78

    Control whether the ios stack sampling profiler is enabled. This flag is
    only supported on iOS 64-bit architecture, but some project build //base
    for 32-bit architecture.

is_asan
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:14

    Compile for Address Sanitizer to find memory bugs.

is_cast_android
    Current value (from the default) = false
      From //build/config/cast.gni:32

    Set this to true to build for Android-based Cast devices.
    Set this to false to use the defaults for Android.

is_cast_audio_only
    Current value (from the default) = false
      From //build/config/cast.gni:12

    Set this true for an audio-only Chromecast build.
    TODO(crbug.com/41489655): Remove this arg as CastOS builds are no
    longer supported.

is_castos
    Current value (from the default) = false
      From //build/config/cast.gni:28

    Set this to true to build for Nest hardware running Linux (aka "CastOS").
    Set this to false to use the defaults for Linux.

is_cfi
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:59

    Compile with Control Flow Integrity to protect virtual calls and casts.
    See http://clang.llvm.org/docs/ControlFlowIntegrity.html
   
    TODO(pcc): Remove this flag if/when CFI is enabled in all official builds.

is_cfm
    Current value (from the default) = false
      From //build/config/chromebox_for_meetings/buildflags.gni:7

    True if compiling for Chromebox for Meeting devices.

is_chancie_wancie_build
    Current value (from the default) = false
      From //third_party/ffmpeg/ffmpeg_options.gni:18

is_chrome_branded
    Current value (from the default) = false
      From //build/config/chrome_build.gni:9

    Select the desired branding flavor. False means normal Chromium branding,
    true means official Google Chrome branding (requires extra Google-internal
    resources).

is_chrome_for_testing
    Current value (from the default) = false
      From //build/config/chrome_build.gni:15

    Whether to enable the Chrome for Testing (CfT) flavor. This arg is not
    compatible with `is_chrome_branded`.
   
    Design document: https://goo.gle/chrome-for-testing

is_chrome_for_testing_branded
    Current value (from the default) = false
      From //build/config/chrome_build.gni:21

    Whether to use internal Chrome for Testing (CfT).
    Requires `src-internal/` and `is_chrome_for_testing = true`.
   
    When true, use Google-internal icons, otherwise fall back to Chromium icons.

is_chromeos_device
    Current value (from the default) = false
      From //build/config/chromeos/args.gni:26

    Determines if we're building for a Chrome OS device (or VM) and not just
    linux-chromeos. NOTE: Most test targets in Chrome expect to run under
    linux-chromeos, so some have compile-time asserts that intentionally fail
    when this build flag is set. Build and run the tests for linux-chromeos
    instead.
    https://chromium.googlesource.com/chromium/src/+/main/docs/chromeos_build_instructions.md
    https://chromium.googlesource.com/chromiumos/docs/+/main/simple_chrome_workflow.md

is_chromeos_with_hw_details
    Current value (from the default) = false
      From //build/config/chromeos/args.gni:34

    Determines if we collect hardware information in chrome://system and
    feedback logs. A similar build flag "hw_details" is defined in Chrome OS
    (see https://crrev.com/c/3123455).

is_clang
    Current value (from the default) = true
      From //build/config/BUILDCONFIG.gn:139

    Set to true when compiling with the Clang compiler.

is_component_build
    Current value (from the default) = true
      From //build/config/BUILDCONFIG.gn:173

    Component build. Setting to true compiles targets declared as "components"
    as shared libraries loaded dynamically. This speeds up development time.
    When false, components will be linked statically.
   
    For more information see
    https://chromium.googlesource.com/chromium/src/+/main/docs/component_build.md

is_component_ffmpeg
    Current value (from the default) = true
      From //third_party/ffmpeg/ffmpeg_options.gni:41

    Set true to build ffmpeg as a shared library. NOTE: this means we should
    always consult is_component_ffmpeg instead of is_component_build for
    ffmpeg targets. This helps linux chromium packagers that swap out our
    ffmpeg.so with their own. See discussion here
    https://groups.google.com/a/chromium.org/forum/#!msg/chromium-packagers/R5rcZXWxBEQ/B6k0zzmJbvcJ

is_cronet_build
    Current value (from the default) = false
      From //build/config/cronet/config.gni:9

    Control whether cronet is built (this is usually set by the script
    components/cronet/tools/cr_cronet.py as cronet requires specific
    gn args to build correctly).

is_cronet_for_aosp_build
    Current value (from the default) = false
      From //build/config/cronet/config.gni:14

    Controls whether cronet is currently being built for AOSP or Chromium.
    This will always be false when building Cronet for Chromium.
    the flag exists to accommodate for the divergence between the repos.

is_ct_supported
    Current value (from the default) = true
      From //services/network/public/cpp/features.gni:9

    Certificate transparency is not supported on iOS.

is_debug
    Current value (from the default) = true
      From //build/config/BUILDCONFIG.gn:163

    Debug build. Enabling official builds automatically sets is_debug to false.

is_desktop_android
    Current value (from the default) = false
      From //build/config/chrome_build.gni:29

    Set to true to set defaults that enable features on Android that are more
    typically available on desktop.

is_ggp
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:8

is_high_end_android
    Current value (from the default) = true
      From //build/config/chrome_build.gni:25

    Set to true to enable settings for high end Android devices, typically
    enhancing speed at the expense of resources such as binary sizes and memory.

is_high_end_android_secondary_toolchain
    Current value (from the default) = false
      From //build/config/chrome_build.gni:54

    Whether to apply size->speed trade-offs to the secondary toolchain.
    Relevant only for 64-bit target_cpu.

is_hwasan
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:19

    Compile for Hardware-Assisted Address Sanitizer to find memory bugs
    (android/arm64 only).
    See http://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html

is_java_debug
    Current value (from the default) = true
      From //build/config/android/config.gni:18

    Java debug on Android. Having this on enables multidexing, and turning it
    off will enable proguard.

is_lsan
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:22

    Compile for Leak Sanitizer to find leaks.

is_msan
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:25

    Compile for Memory Sanitizer to find uninitialized reads.

is_nacl_glibc
    Current value (from the default) = false
      From //build/config/nacl/config.gni:12

    True if nacl_glibc is used.

is_nacl_saigo
    Current value (from the default) = false
      From //build/config/nacl/config.gni:15

    True if saigo_newlib is used.

is_official_build
    Current value (from the default) = false
      From //build/config/BUILDCONFIG.gn:136

    Set to enable the official build level of optimization. This has nothing
    to do with branding, but enables an additional level of optimization above
    release (!is_debug). This might be better expressed as a tri-state
    (debug, release, official) but for historical reasons there are two
    separate flags.
   
    IMPORTANT NOTE: (!is_debug) is *not* sufficient to get satisfying
    performance. In particular, DCHECK()s are still enabled for release builds,
    which can halve overall performance, and do increase memory usage. Always
    set "is_official_build" to true for any build intended to ship to end-users.

is_on_release_branch
    Current value (from the default) = false
      From //v8/gni/release_branch_toggle.gni:8

    TODO(liviurau): Remove old name after Chromium config update
    https://crbug.com/1476977.

is_p2p_enabled
    Current value (from the default) = true
      From //services/network/public/cpp/features.gni:15

    Controls whether P2P is exposed by the network service.
    Optional to reduce avoid having Chrome on iOS depends on
    WebRTC and related third-party libraries (libvpx, libaom,
    ...).

is_perfetto_build_generator
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:86

    All the tools/gen_* scripts set this to true. This is mainly used to locate
    .gni files from //gn rather than //build.

is_perfetto_embedder
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:91

    This is for override via `gn args` (e.g. for tools/gen_xxx). Embedders
    based on GN (e.g. v8) should NOT set this and instead directly sets
    perfetto_build_with_embedder=true in their GN files.

is_raspi
    Current value (from the default) = false
      From //build/config/compiler_opt.gni:11

    Whether to use Raspberry Pi specific optimizations.

is_reven
    Current value (from the default) = false
      From //build/config/chromeos/args.gni:40

    Refers to the separate branding required for the reven build.

is_robolectric
    Current value (from the default) = false
      From //build/config/BUILDCONFIG.gn:156

    Do not set this directly.
    It should be set only by //build/toolchains/android:robolectric_x64.
    True when compiling native code for use with robolectric_binary().

is_skylab
    Current value (from the default) = false
      From //build/config/chromeos/args.gni:29

    Determines if we run the test in skylab, aka the CrOS labs.

is_thorium_build
    Current value (from the default) = true
      From //third_party/blink/public/public_features.gni:12

    Thorium internal flag

is_tsan
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:28

    Compile for Thread Sanitizer to find threading bugs.

is_ubsan
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:32

    Compile for Undefined Behaviour Sanitizer to find various types of
    undefined behaviour (excludes vptr checks).

is_ubsan_no_recover
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:35

    Halt the program if a problem is detected.

is_ubsan_security
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:95

    Enables core ubsan security features. Will later be removed once it matches
    is_ubsan.

is_ubsan_vptr
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:139

    Compile for Undefined Behaviour Sanitizer's vptr checks.

is_unsafe_developer_build
    Current value (from the default) = true
      From //base/BUILD.gn:65

    Unsafe developer build. Has developer-friendly features that may weaken or
    disable security measures like sandboxing or ASLR.
    IMPORTANT: Unsafe developer builds should never be distributed to end users.

is_win_arm64
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:167

    Currently Windows on Arm doesn't support OpenGL or Vulkan.

jinja_dir
    Current value (from the default) = "//third_party"
      From //v8/third_party/inspector_protocol/inspector_protocol.gni:7

    Where jinja2 is located, in chromium it is //third_party.

lacros_use_chromium_toolchain
    Current value (from the default) = false
      From //build/toolchain/cros/cros_config.gni:8

    If set, build lacros with Chromium's toolchain instead of with Chrome OS's.
    TODO(thakis): Set this to `= chromeos_is_browser_only` once that works.

lastchange_year_header_name
    Current value (from the default) = ""
      From //chrome/browser/request_header_integrity/buildflags.gni:12

ldso_path
    Current value (from the default) = ""
      From //build/config/gcc/BUILD.gn:20

libcxx_is_shared
    Current value (from the default) = true
      From //build/config/c++/c++.gni:63

    WARNING: Setting this to a non-default value is highly discouraged.
    If true, libc++ will be built as a shared library; otherwise libc++ will be
    linked statically. Setting this to something other than the default is
    unsupported and can be broken by libc++ rolls. Note that if this is set to
    true, you must also set libcxx_abi_unstable=false, which is bad for
    performance and memory use.

libcxx_natvis_include
    Current value (from the default) = true
      From //build/config/c++/c++.gni:29

    Builds libcxx Natvis into the symbols for type visualization.
    Set to false to workaround http://crbug.com/966676 and
    http://crbug.com/966687.

libcxx_revision
    Current value (from the default) = "50ab693ecb611942ce4440d8c9ed707ee65ed5e8"
      From //buildtools/deps_revisions.gni:8

    Used to cause full rebuilds on libc++ rolls. This should be kept in sync
    with the libcxx_revision vars in //DEPS.

libsrtp_build_boringssl
    Current value (from the default) = true
      From //third_party/libsrtp/options.gni:8

    Build with BoringSSL by default, allow WebRTC to override
    this and the include path from rtc_build_ssl and rtc_ssl_root

libsrtp_ssl_root
    Current value (from the default) = ""
      From //third_party/libsrtp/options.gni:9

libyuv_disable_jpeg
    Current value (from the default) = false
      From //third_party/libyuv/libyuv.gni:16

libyuv_disable_rvv
    Current value (from the default) = false
      From //third_party/libyuv/libyuv.gni:17

libyuv_include_tests
    Current value (from the default) = false
      From //third_party/libyuv/libyuv.gni:15

libyuv_symbols_visible
    Current value (from the default) = false
      From //third_party/libyuv/BUILD.gn:20

    When building a shared library using a target in WebRTC or
    Chromium projects that depends on libyuv, setting this flag
    to true makes libyuv symbols visible inside that library.

libyuv_use_absl_flags
    Current value (from the default) = true
      From //third_party/libyuv/BUILD.gn:15

    Set to false to disable building with absl flags.

libyuv_use_lasx
    Current value (from the default) = false
      From //third_party/libyuv/libyuv.gni:33

libyuv_use_lsx
    Current value (from the default) = false
      From //third_party/libyuv/libyuv.gni:32

libyuv_use_mmi
    Current value (from the default) = false
      From //third_party/libyuv/libyuv.gni:31

libyuv_use_msa
    Current value (from the default) = false
      From //third_party/libyuv/libyuv.gni:29

libyuv_use_neon
    Current value (from the default) = false
      From //third_party/libyuv/libyuv.gni:19

libyuv_use_sme
    Current value (from the default) = false
      From //third_party/libyuv/libyuv.gni:27

    Restrict to is_linux to work around undefined symbol linker errors on
    Android, Fuchsia, macOS, and compilation errors on Windows.
    TODO: bug 359006069 - Remove the is_linux restriction after the linker and
    compilation errors are fixed.

libyuv_use_sve
    Current value (from the default) = false
      From //third_party/libyuv/libyuv.gni:21

limit_android_deps
    Current value (from the default) = false
      From //build_overrides/build.gni:46

    Limits the defined //third_party/android_deps targets to only "buildCompile"
    and "buildCompileNoDeps" targets. This is useful for third-party
    repositories which do not use JUnit tests. For instance,
    limit_android_deps == true removes "gn gen" requirement for
    //third_party/robolectric .

link_pulseaudio
    Current value (from the default) = false
      From //media/media_options.gni:42

    Allows distributions to link pulseaudio directly (DT_NEEDED) instead of
    using dlopen. This helps with automated detection of ABI mismatches and
    prevents silent errors.

lld_emit_indexes_and_imports
    Current value (from the default) = false
      From //build/config/clang/clang.gni:41

    Set to true to enable output of ThinLTO index and import files used for
    creating a Chromium MLGO corpus in the ThinLTO case.

llvm_android_mainline
    Current value (from the default) = false
      From //build/toolchain/toolchain.gni:24

    Cronet is shipped in AOSP, where it is built using the Android Mainline
    Clang. Please refer to go/cronet-builders-with-mainline-clang-design for
    more information.
    If this arg is set to true, we use the Android Mainline LLVM.

llvm_force_head_revision
    Current value (from the default) = false
      From //build/toolchain/toolchain.gni:18

    If this is set to true, we use the revision in the llvm repo to determine
    the CLANG_REVISION to use, instead of the version hard-coded into
    //tools/clang/scripts/update.py. This should only be used in
    conjunction with setting the llvm_force_head_revision DEPS variable when
    `gclient runhooks` is run as well.

mac_sdk_min
    Current value (from the default) = "10.15"
      From //build/config/mac/mac_sdk_overrides.gni:12

mbi_mode
    Current value (from the default) = true
      From //content/common/features.gni:20

    Whether or not MBI mode (Multiple Blink Isolates) should be enabled,
    depending on the build argument.

media_use_ffmpeg
    Current value (from the default) = true
      From //media/media_options.gni:47

    Enable usage of FFmpeg within the media library. Used for most software
    based decoding, demuxing, and sometimes optimized FFTs. If disabled,
    implementors must provide their own demuxers and decoders.

media_use_libvpx
    Current value (from the default) = true
      From //media/media_options.gni:51

    Enable usage of libvpx within the media library. Used for software based
    decoding of VP9 and VP8A type content.

media_use_openh264
    Current value (from the default) = false
      From //media/media_options.gni:63

mediapipe_build_with_gpu_support
    Current value (from the default) = false
      From //third_party/mediapipe/BUILD.gn:15

    To be set to true after integration with VideoEffectsService.

mips_use_mmi
    Current value (from the default) = false
      From //build/config/mips.gni:13

    MIPS MultiMedia Instruction compilation flag.

mojo_media_host
    Current value (from the default) = "gpu"
      From //media/media_options.gni:321

    The process that the mojo MediaService runs in. By default, all services
    registered in |mojo_media_services| are hosted in the MediaService, with the
    exception that when |enable_library_cdms| is true, the "cdm" service will
    run in a separate CdmService in the CDM (utility) process, while other
    |mojo_media_services| still run in the MediaService in the process specified
    by "mojo_media_host".
    Valid options are:
    - "browser": Use mojo media service hosted in the browser process.
    - "gpu": Use mojo media service hosted in the gpu process.
    - "": Do not use mojo media service.

mojo_media_services
    Current value (from the default) = ["video_decoder", "cdm"]
      From //media/media_options.gni:309

    A list of mojo media services that should be used in the media pipeline.
    Valid entries in the list are:
    - "renderer": Use mojo-based media Renderer service.
    - "cdm": Use mojo-based Content Decryption Module.
    - "audio_decoder": Use mojo-based audio decoder in the default media
                       Renderer. Cannot be used with the mojo Renderer above.
    - "video_decoder": Use mojo-based video decoder in the default media
                       Renderer. Cannot be used with the mojo Renderer above.

mojo_support_legacy_core
    Current value (from the default) = false
      From //mojo/features.gni:21

    Builds non-ipcz-based Mojo Core. No longer supported anywhere but Chrome OS.
    We check target_os instead of is_chromeos since this also needs to be set
    when building NaCl binaries (is_nacl) for Chrome OS.
   
    When this is true, ipcz-based Mojo Core can be disabled by disabling the
    MojoIpcz feature flag; and it's disabled by default on Chrome OS. When this
    is false, ipcz-based Mojo Core is used unconditionally.
   
    We also enable this by default for fuzzer builds, since some active fuzzers
    require the legacy implementation.

mojo_use_apple_channel
    Current value (from the default) = false
      From //mojo/features.gni:9

monolithic_binaries
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:218

    Only for local development. When true the binaries (perfetto, traced, ...)
    are monolithic and don't use a common shared library. This is mainly to
    avoid LD_LIBRARY_PATH dances when testing locally.
    On Windows we default to monolithic executables, because pairing
    dllexport/import adds extra complexity for little benefit. Te only reason
    for monolithic_binaries=false is saving binary size, which matters mainly on
    Android. See also comments on PERFETTO_EXPORT_ENTRYPOINT in compiler.h.

msan_check_use_after_dtor
    Current value (from the default) = true
      From //build/config/sanitizers/sanitizers.gni:49

    TODO(crbug.com/40222690): Enable everywhere.

msan_eager_checks
    Current value (from the default) = true
      From //build/config/sanitizers/sanitizers.gni:46

    Enables "param-retval" mode, which finds more uses of uninitialized data and
    reduces code size. Behind a flag as there are a number of previously
    undetected violations that still need to be fixed.
    TODO(crbug.com/40240570): Default this to true and remove.

msan_track_origins
    Current value (from the default) = 2
      From //build/config/sanitizers/sanitizers.gni:40

    Track where uninitialized memory originates from. From fastest to slowest:
    0 - no tracking, 1 - track only the initial allocation site, 2 - track the
    chain of stores leading from allocation site to use site.

msvc_use_sse2
    Current value (from the default) = true
      From //third_party/pdfium/pdfium.gni:84

    Enable SSE2 for MSVC builds. Ignored if it's not a MSVC build.

ndk_api_level_at_least_26
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:143

openscreen_monolithic
    Current value (from the default) = false
      From //third_party/openscreen/src/gni/openscreen.gni:17

    Enable monolithic static library for embedders.

openscreen_static_library
    Current value (from the default) = false
      From //third_party/openscreen/src/gni/openscreen.gni:14

    Use static libraries instead of source_sets.

optimize_for_fuzzing
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:88

    Optimize for coverage guided fuzzing (balance between speed and number of
    branches)

optimize_for_size
    Current value (from the default) = false
      From //build/config/compiler/compiler.gni:42

optimize_webui
    Current value (from the default) = false
      From //ui/webui/webui_features.gni:12

    Optimize parts of Chrome's UI written with web technologies (HTML/CSS/JS)
    for runtime performance purposes. This does more work at compile time for
    speed benefits at runtime (so we skip in debug builds).

optional_trace_events_enabled
    Current value (from the default) = true
      From //base/trace_event/tracing.gni:20

os_level_geolocation_permission_supported
    Current value (from the default) = false
      From //services/device/public/cpp/geolocation/buildflags.gni:11

    Specifies if we support the OS level global geolocation permission for the current platform.
    This is exposed with the macro OS_LEVEL_GEOLOCATION_PERMISSION_SUPPORTED.

overlay_include_cbx
    Current value (from the default) = false
      From //chromeos/components/libsegmentation/buildflags.gni:10

    Compiled on a board overlay that supports CBX

ozone_auto_platforms
    Current value (from the default) = true
      From //build/config/ozone.gni:21

    Select platforms automatically. Turn this off for manual control.

ozone_extra_path
    Current value (from the default) = "//build/config/ozone_extra.gni"
      From //build/config/ozone.gni:18

    Ozone extra platforms file path. Can be overridden to build out of
    tree ozone platforms.

ozone_platform
    Current value (from the default) = "x11"
      From //build/config/ozone.gni:88

ozone_platform_cast
    Current value (from the default) = false
      From //build/config/ozone.gni:43

    Compile the 'cast' platform.

ozone_platform_drm
    Current value (from the default) = false
      From //build/config/ozone.gni:46

    Compile the 'drm' platform.

ozone_platform_flatland
    Current value (from the default) = false
      From //build/config/ozone.gni:52

    Compile the 'flatland' platform.

ozone_platform_gbm
    Current value (from the default) = -1
      From //build/config/ozone.gni:25

    TODO(petermcneeley): Backwards compatiblity support for VM images.
    Remove when deprecated. (https://crbug.com/1122009)

ozone_platform_headless
    Current value (from the default) = true
      From //build/config/ozone.gni:63

ozone_platform_wayland
    Current value (from the default) = true
      From //build/config/ozone.gni:89

ozone_platform_x11
    Current value (from the default) = true
      From //build/config/ozone.gni:90

page_info_use_internal_android_resources
    Current value (from the default) = false
      From //chrome/browser/page_info/buildflags.gni:12

partition_alloc_optimized_debug
    Current value (from the default) = true
      From //build_overrides/partition_alloc.gni:53

    Turns on compiler optimizations in PartitionAlloc in Debug build. If
    enabling PartitionAlloc-Everywhere in Debug build for tests in Debug build,
    since all memory allocations and deallocations are executed by non-optimized
    PartitionAlloc, chrome (including tests) will be much slower. This will
    cause debug trybots' timeouts. If we want to debug PartitionAlloc itself,
    use partition_alloc_optimized_debug=false. Otherwise, use
    partition_alloc_optimized_debug=true to enable optimized PartitionAlloc.

pdf_bundle_freetype
    Current value (from the default) = false
      From //third_party/pdfium/pdfium.gni:17

    Build PDFium either:
    1) When set to true, with a bundled FreeType, built from FreeType source
       code in //third_party/freetype and PDFium's FreeType configs in
       third_party/freetype/include.
    2) When set to false, use whatever FreeType target is defined in
       //build/config/freetype.

pdf_enable_click_logging
    Current value (from the default) = false
      From //third_party/pdfium/pdfium.gni:20

    Generate logging messages for click events that reach PDFium

pdf_enable_fontations
    Current value (from the default) = false
      From //third_party/pdfium/pdfium.gni:56

    Build PDFium with experimental Fontations library support.
    If enabled, coexists in build with FreeType library and the default font
    library is selectable at runtime.
    Note that Fontations requires Skia and Rust support.

pdf_enable_v8
    Current value (from the default) = true
      From //third_party/pdfium/pdfium.gni:23

    Build PDFium either with or without v8 support.

pdf_enable_xfa
    Current value (from the default) = true
      From //third_party/pdfium/pdfium.gni:26

    Build PDFium either with or without XFA Forms support.

pdf_enable_xfa_bmp
    Current value (from the default) = true
      From //third_party/pdfium/pdfium.gni:29

    If XFA, also support bmp codec. Ignored if not XFA.

pdf_enable_xfa_gif
    Current value (from the default) = true
      From //third_party/pdfium/pdfium.gni:32

    If XFA, also support gif codec. Ignored if not XFA.

pdf_enable_xfa_png
    Current value (from the default) = true
      From //third_party/pdfium/pdfium.gni:35

    If XFA, also support png codec. Ignored if not XFA.

pdf_enable_xfa_tiff
    Current value (from the default) = true
      From //third_party/pdfium/pdfium.gni:38

    If XFA, also support tiff codec. Ignored if not XFA.

pdf_is_complete_lib
    Current value (from the default) = false
      From //third_party/pdfium/pdfium.gni:63

    Build a complete static library

pdf_is_standalone
    Current value (from the default) = false
      From //third_party/pdfium/pdfium.gni:60

    Build PDFium standalone. Now only controls whether the test binaries
    are built. Most logic is conditioned by build_with_chromium.

pdf_use_partition_alloc
    Current value (from the default) = true
      From //third_party/pdfium/pdfium.gni:45

    Build PDFium against PartitionAlloc. When false, PDFium must build without
    requiring any PartitionAlloc headers or code to be present. When true,
    PDFium will use PartitionAlloc partitions to separate strings, scalars,
    etc. from other allocations. However, the use of PartitionAlloc for new or
    malloc is controlled by args in build_overrides/partition_alloc.gni.

pdf_use_skia
    Current value (from the default) = true
      From //third_party/pdfium/pdfium.gni:50

    Build PDFium to use Skia (experimental) for all PDFium graphics.
    If enabled, coexists in build with AGG graphics and the default
    renderer is selectable at runtime.

perfetto_build_with_android
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:82

    The Android blueprint file generator set this to true (as well as
    is_perfetto_build_generator). This is just about being built in the
    Android tree (AOSP and internal) and is NOT related with the target OS.
    In standalone Android builds and Chromium Android builds, this is false.

perfetto_enable_git_rev_version_header
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:261

perfetto_force_dcheck
    Current value (from the default) = ""
      From //third_party/perfetto/gn/perfetto.gni:233

    Whether DCHECKs should be enabled or not. Values: "on" | "off" | "".
    By default ("") DCHECKs are enabled only:
    - If DCHECK_ALWAYS_ON is defined (which is mainly a Chromium-ism).
    - On debug builds (i.e. if NDEBUG is NOT defined) but only in Chromium,
      Android and standalone builds.
    - On all other builds (e.g., SDK) it's off regardless of NDEBUG (unless
      DCHECK_ALWAYS_ON is defined).
    See base/logging.h for the implementation of all this.

perfetto_force_dlog
    Current value (from the default) = "off"
      From //third_party/perfetto/gn/perfetto.gni:223

    Whether DLOG should be enabled on debug builds (""), all builds ("on"), or
    none ("off"). We disable it by default for embedders to avoid spamming their
    console.

perfetto_use_pkgconfig
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:368

    Used by CrOS builds. Uses pkg-config to determine the appropriate flags
    for including and linking system libraries.
      set `host_pkg_config` to the `BUILD_PKG_CONFIG` and
      set `pkg_config` to the target `PKG_CONFIG`.
    Note: that if this is enabled `perfetto_use_system_protobuf` should be also.

perfetto_use_system_protobuf
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:372

    Used by CrOS system builds. Uses the system version of protobuf
    from /usr/include instead of the hermetic one.

perfetto_use_system_sqlite
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:376

    Used by CrOS system builds. Uses the system version of sqlite
    from /usr/include instead of the hermetic one.

perfetto_use_system_zlib
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:378

perfetto_verbose_logs_enabled
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:279

pgo_data_path
    Current value (from the default) = ""
      From //build/config/compiler/pgo/pgo.gni:36

    When using chrome_pgo_phase = 2, read profile data from this path.

pkg_config
    Current value (from the default) = ""
      From //build/config/linux/pkg_config.gni:33

    A pkg-config wrapper to call instead of trying to find and call the right
    pkg-config directly. Wrappers like this are common in cross-compilation
    environments.
    Leaving it blank defaults to searching PATH for 'pkg-config' and relying on
    the sysroot mechanism to find the right .pc files.

platform_has_optional_hevc_support
    Current value (from the default) = false
      From //media/media_options.gni:150

plus_addresses_use_internal_android_resources
    Current value (from the default) = false
      From //components/plus_addresses/buildflags.gni:11

print_unsymbolized_stack_traces
    Current value (from the default) = false
      From //build/config/logging.gni:19

    Stack traces will not include function names. Instead they will contain
    file and offset information that can be used with
    tools/valgrind/asan/asan_symbolize.py. By piping stderr through this script,
    and also enabling symbol_level = 2, you can get much more detailed stack
    traces with file names and line numbers, even in non-ASAN builds.

produce_v8_compile_hints
    Current value (from the default) = true
      From //third_party/blink/renderer/bindings/bindings.gni:7

    Enable V8 to produce hints regarding which functions to compile eagerly.

proprietary_codecs
    Current value (from the default) = false
      From //build/config/features.gni:31

    Enables proprietary codecs and demuxers; e.g. H264, AAC, MP3, and MP4.
    We always build Google Chrome and Chromecast with proprietary codecs.
   
    Note: this flag is used by WebRTC which is DEPSed into Chrome. Moving it
    out of //build will require using the build_overrides directory.
   
    Do not add any other conditions to the following line.
   
    TODO(crbug.com/1314528): Remove chromecast-related conditions and force
    builds to explicitly specify this.

raw_ptr_zero_on_construct
    Current value (from the default) = true
      From //base/allocator/partition_allocator/partition_alloc.gni:427

raw_ptr_zero_on_destruct
    Current value (from the default) = false
      From //base/allocator/partition_allocator/partition_alloc.gni:429

raw_ptr_zero_on_move
    Current value (from the default) = true
      From //base/allocator/partition_allocator/partition_alloc.gni:428

rbe_bin_dir
    Current value (from the default) = ""
      From //build/toolchain/rbe.gni:11

    Deprecated: Please use reclient_bin_dir instead.

rbe_cfg_dir
    Current value (from the default) = ""
      From //build/toolchain/rbe.gni:14

    Deprecated: Please use reclient_cfg_dir instead.

rbe_cros_cc_wrapper
    Current value (from the default) = ""
      From //build/toolchain/rbe.gni:17

    Deprecated: Please use reclient_cros_cc_wrapper instead.

rbe_exec_root
    Current value (from the default) = "/home/alex/chromium/src/"
      From //build/toolchain/rbe.gni:23

    Execution root - this should be the root of the source tree.
    This is defined here instead of in the config file because
    this will vary depending on where the user has placed the
    chromium source on their system.

reclient_bin_dir
    Current value (from the default) = "../../buildtools/reclient"
      From //build/toolchain/rbe.gni:45

reclient_cc_cfg_file
    Current value (from the default) = ""
      From //build/toolchain/rbe.gni:74

reclient_cfg_dir
    Current value (from the default) = "//buildtools/reclient_cfgs"
      From //build/toolchain/rbe.gni:56

reclient_cros_cc_wrapper
    Current value (from the default) = ""
      From //build/toolchain/rbe.gni:124

reclient_link_cfg_file
    Current value (from the default) = ""
      From //build/toolchain/rbe.gni:75

reclient_py_cfg_file
    Current value (from the default) = ""
      From //build/toolchain/rbe.gni:76

reclient_py_large_cfg_file
    Current value (from the default) = ""
      From //build/toolchain/rbe.gni:77

regenerate_x11_protos
    Current value (from the default) = false
      From //ui/gfx/x/BUILD.gn:12

register_fuzztests_in_test_suites
    Current value (from the default) = true
      From //build/config/sanitizers/sanitizers.gni:178

remoting_internal
    Current value (from the default) = false
      From //remoting/build/config/remoting_build.gni:28

    You can set the variable 'remoting_internal' to true to include Google-
    internal sources and implementations in a developer build. Setting this
    variable explicitly to true will cause your build to fail if the
    //remoting/internal directory is not present in your checkout.

remoting_webrtc_verbose_logging
    Current value (from the default) = false
      From //remoting/build/config/remoting_logging.gni:13

    Enabling this will cause WebRTC's LS_INFO and LS_VERBOSE (level 1)
    messages to appear in the debug log output. Note that WebRTC's
    "VERBOSE1" messages are very spammy and it is impossible to
    separately filter LS_INFO and LS_VERBOSE messages (see
    third_party/webrtc_overrides/rtc_base/). So a separate GN option is
    provided here, to allow this logging to be quickly enabled for Debug
    or Release builds.

removed_rust_stdlib_libs
    Current value (from the default) = []
      From //build/config/rust.gni:90

    Any removed std rlibs in your Rust toolchain, relative to the standard
    Rust toolchain. Typically used with 'rust_sysroot_absolute'

restricted_traces_outside_of_apk
    Current value (from the default) = false
      From //third_party/angle/gni/angle.gni:48

    Only bundle traces in the APK if we're building a subset

root_extra_deps
    Current value (from the default) = []
      From //BUILD.gn:70

    A list of extra dependencies to add to the root target. This allows a
    checkout to add additional targets without explicitly changing any checked-
    in files.

rtc_audio_device_plays_sinus_tone
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:210

    When set to true, replace the audio output with a sinus tone at 440Hz.
    The ADM will ask for audio data from WebRTC but instead of reading real
    audio samples from NetEQ, a sinus tone will be generated and replace the
    real audio samples.

rtc_build_dcsctp
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:343

    Enable the dcsctp backend for DataChannels and related unittests

rtc_build_examples
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:135

    Set this to false to skip building examples.

rtc_build_json
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:287

    Disable these to not build components which can be externally provided.

rtc_build_libevent
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:301

rtc_build_libsrtp
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:288

rtc_build_libvpx
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:289

rtc_build_opus
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:291

rtc_build_ssl
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:292

rtc_build_tools
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:138

    Set this to false to skip building tools.

rtc_build_with_neon
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:174

rtc_builtin_ssl_root_certificates
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:100

    Setting this to false will require the API user to pass in their own
    SSLCertificateVerifier to verify the certificates presented from a
    TLS-TURN server. In return disabling this saves around 100kb in the binary.

rtc_common_public_deps
    Current value = ["//base"]
      From //.gn:46
    Overridden from the default = []
      From //third_party/webrtc/webrtc.gni:266

    Embedders can define dependencies needed by WebRTC. Dependencies can be
    configs or targets. This can be defined in their `.gn` file.
   
    In practise, this is use by Chromium: Targets from
    `//third_party/webrtc_overrides` are depending on Chrome's `//base`, but
    WebRTC does not declare its public dependencies. See webrtc:8603. Instead
    WebRTC is using a global common dependencies.

rtc_disable_check_msg
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:335

    Set this to true to disable detailed error message and logging for
    RTC_CHECKs.

rtc_disable_logging
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:328

    Set this to true to fully remove logging from WebRTC.

rtc_disable_metrics
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:338

    Set this to true to disable webrtc metrics.

rtc_disable_trace_events
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:331

    Set this to true to disable trace events.

rtc_dlog_always_on
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:59

    Setting this to true, will make RTC_DLOG() expand to log statements instead
    of being removed by the preprocessor.
    This is useful for example to be able to get RTC_DLOGs on a release build.

rtc_enable_android_aaudio
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:157

    Experimental: enable use of Android AAudio which requires Android SDK 26 or above
    and NDK r16 or above.

rtc_enable_avx2
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:314

rtc_enable_external_auth
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:125

    Enable when an external authentication mechanism is used for performing
    packet authentication for RTP packets instead of libsrtp.

rtc_enable_google_benchmarks
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:63

    Enables additional build targets that rely on
    //third_party/google_benchmarks.

rtc_enable_grpc
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:346

    Enable gRPC used for negotiation in multiprocess tests

rtc_enable_libevent
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:300

rtc_enable_objc_symbol_export
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:70

    Setting this to true will make RTC_OBJC_EXPORT expand to code that will
    manage symbols visibility. By default, Obj-C/Obj-C++ symbols are exported
    if C++ symbols are but setting this arg to true while keeping
    rtc_enable_symbol_export=false will only export RTC_OBJC_EXPORT
    annotated symbols.

rtc_enable_protobuf
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:281

    Enables the use of protocol buffers for debug recordings.

rtc_enable_sctp
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:284

    Set this to disable building with support for SCTP data channels.

rtc_enable_symbol_export
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:52

    Setting this to true will make RTC_EXPORT (see rtc_base/system/rtc_export.h)
    expand to code that will manage symbols visibility.

rtc_enable_win_wgc
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:238

    When set to true, a capturer implementation that uses the
    Windows.Graphics.Capture APIs will be available for use. This introduces a
    dependency on the Win 10 SDK v10.0.17763.0.

rtc_exclude_audio_processing_module
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:132

    Selects whether the audio processing module should be excluded.

rtc_exclude_field_trial_default
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:80

    When WebRTC is built as part of Chromium it should exclude the default
    implementation of field_trial unless it is building for NACL or
    Chromecast.

rtc_exclude_metrics_default
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:89

    Setting this to true will define WEBRTC_EXCLUDE_METRICS_DEFAULT which
    will tell the pre-processor to remove the default definition of symbols
    needed to use metrics. In that case a new implementation needs to be
    provided.

rtc_exclude_system_time
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:95

    Setting this to true will define WEBRTC_EXCLUDE_SYSTEM_TIME which
    will tell the pre-processor to remove the default definition of the
    SystemTimeNanos() which is defined in rtc_base/system_time.cc. In
    that case a new implementation needs to be provided.

rtc_include_builtin_audio_codecs
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:225

    When set to false, builtin audio encoder/decoder factories and all the
    audio codecs they depend on will not be included in libwebrtc.{a|lib}
    (they will still be included in libjingle_peerconnection_so.so and
    WebRTC.framework)

rtc_include_dav1d_in_internal_decoder_factory
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:241

    Includes the dav1d decoder in the internal decoder factory when set to true.

rtc_include_ilbc
    Current value = false
      From //.gn:51
    Overridden from the default = true
      From //third_party/webrtc/webrtc.gni:103

    Include the iLBC audio codec?

rtc_include_internal_audio_device
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:309

    Chromium uses its own IO handling, so the internal ADM is only built for
    standalone WebRTC.

rtc_include_opus
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:106

    Disable this to avoid building the Opus audio codec.

rtc_include_pulse_audio
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:305

    Excluded in Chromium since its prerequisites don't require Pulse Audio.

rtc_include_tests
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:321

    Set this to true to build the unit tests.
    Disabled when building with Chromium or Mozilla.

rtc_ios_use_opengl_rendering
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:219

    Determines whether OpenGL is available on iOS.

rtc_jsoncpp_root
    Current value (from the default) = "//third_party/jsoncpp/source/include"
      From //third_party/webrtc/webrtc.gni:117

    Used to specify an external Jsoncpp include path when not compiling the
    library that comes with WebRTC (i.e. rtc_build_json == 0).

rtc_libvpx_build_vp9
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:290

rtc_link_pipewire
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:150

    Set this to link PipeWire and required libraries directly instead of using the dlopen.

rtc_objc_prefix
    Current value (from the default) = ""
      From //third_party/webrtc/webrtc.gni:257

    If different from "", symbols exported with RTC_OBJC_EXPORT will be prefixed
    with this string.
    See the definition of RTC_OBJC_TYPE_PREFIX in the code.

rtc_opus_support_120ms_ptime
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:110

    Enable this if the Opus version upon which WebRTC is built supports direct
    encoding of 120 ms packets.

rtc_opus_variable_complexity
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:113

    Enable this to let the Opus audio codec change complexity on the fly.

rtc_prefer_fixed_point
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:167

    Selects fixed-point code where possible.

rtc_sanitize_coverage
    Current value (from the default) = ""
      From //third_party/webrtc/webrtc.gni:164

    Set to "func", "block", "edge" for coverage generation.
    At unit test runtime set UBSAN_OPTIONS="coverage=1".
    It is recommend to set include_examples=0.
    Use llvm's sancov -html-report for human readable reports.
    See http://clang.llvm.org/docs/SanitizerCoverage.html .

rtc_ssl_root
    Current value (from the default) = ""
      From //third_party/webrtc/webrtc.gni:121

    Used to specify an external OpenSSL include path when not compiling the
    library that comes with WebRTC (i.e. rtc_build_ssl == 0).

rtc_strict_field_trials
    Current value (from the default) = ""
      From //third_party/webrtc/webrtc.gni:252

    When enabled, a run-time check will make sure that all field trial keys have
    been registered in accordance with the field trial policy, see
    g3doc/field-trials.md. The value can be set to the following:
   
     "dcheck": RTC_DCHECKs that the field trial has been registered. RTC_DCHECK
               must be enabled separately.
   
     "warn": RTC_LOGs a message with LS_WARNING severity if the field trial
             hasn't been registered.

rtc_system_openh264
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:190

    Use system OpenH264

rtc_use_absl_mutex
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:200

    Enable this flag to make webrtc::Mutex be implemented by absl::Mutex.

rtc_use_dummy_audio_file_devices
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:204

    By default, use normal platform audio support or dummy audio, but don't
    use file-based audio playout and record.

rtc_use_h264
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:187

rtc_use_h265
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:194

rtc_use_perfetto
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:269

    When true, include the Perfetto library.

rtc_use_pipewire
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:147

    Set this to use PipeWire on the Wayland display server.
    By default it's only enabled on desktop Linux (excludes ChromeOS) and
    only when using the sysroot as PipeWire is not available in older and
    supported Ubuntu and Debian distributions.

rtc_use_x11
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:141

    Set this to false to skip building code that requires X11.

rtc_use_x11_extensions
    Current value (from the default) = true
      From //third_party/webrtc/webrtc.gni:325

    Set this to false to skip building code that also requires X11 extensions
    such as Xdamage, Xfixes.

rtc_win_undef_unicode
    Current value (from the default) = false
      From //third_party/webrtc/webrtc.gni:233

    When set to true and in a standalone build, it will undefine UNICODE and
    _UNICODE (which are always defined globally by the Chromium Windows
    toolchain).
    This is only needed for testing purposes, WebRTC wants to be sure it
    doesn't assume /DUNICODE and /D_UNICODE but that it explicitly uses
    wide character functions.

runtime_call_stats_count_everything
    Current value (from the default) = false
      From //third_party/blink/renderer/platform/BUILD.gn:236

rust_bindgen_root
    Current value (from the default) = "//third_party/rust-toolchain"
      From //build/config/rust.gni:61

    Directory under which to find `bin/bindgen` (a `bin` directory containing
    the bindgen exectuable).

rust_sysroot_absolute
    Current value (from the default) = ""
      From //build/config/rust.gni:57

    Chromium provides a Rust toolchain in //third_party/rust-toolchain.
   
    To use a custom toolchain instead, specify an absolute path to the root of
    a Rust sysroot, which will have a 'bin' directory and others. Commonly
    <home dir>/.rustup/toolchains/nightly-<something>-<something>

rust_toolchain_supports_nacl
    Current value (from the default) = false
      From //build/config/rust.gni:71

    If you're using a Rust toolchain as specified by rust_sysroot_absolute,
    you can specify whether it supports nacl here.

rustc_version
    Current value (from the default) = ""
      From //build/config/rust.gni:67

    If you're using a Rust toolchain as specified by rust_sysroot_absolute,
    set this to the output of `rustc -V`. Changing this string will cause all
    Rust targets to be rebuilt, which allows you to update your toolchain and
    not break incremental builds.

safe_browsing_mode
    Current value (from the default) = 1
      From //components/safe_browsing/buildflags.gni:20

safe_browsing_use_unrar
    Current value (from the default) = true
      From //components/safe_browsing/buildflags.gni:24

    Allows building without //third_party/unrar included, for license reasons

sample_profile_is_accurate
    Current value (from the default) = false
      From //build/config/compiler/compiler.gni:143

    Whether we should consider the profile we're using to be accurate. Accurate
    profiles have the benefit of (potentially substantial) binary size
    reductions, by instructing the compiler to optimize cold and uncovered
    functions heavily for size. This often comes at the cost of performance.

sanitizer_coverage_allowlist
    Current value (from the default) = ""
      From //build/config/sanitizers/sanitizers.gni:113

    A sanitizer coverage allowlist, specifying exactly which
    files or symbol names should be instrumented, rather than all of them.

sanitizer_coverage_flags
    Current value (from the default) = ""
      From //build/config/sanitizers/sanitizers.gni:109

    Value for -fsanitize-coverage flag. Setting this causes
    use_sanitizer_coverage to be enabled.
    This flag is not used for libFuzzer (use_libfuzzer=true). Instead, we use:
        -fsanitize=fuzzer-no-link
    Default value when unset and use_fuzzing_engine=true:
        trace-pc-guard
    Default value when unset and use_sanitizer_coverage=true:
        trace-pc-guard,indirect-calls

save_reproducers_on_lld_crash
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:184

    If true, linker crashes will be rerun with `--reproduce` which causes
    a reproducer file to be saved.

seed_corpus_dir
    Current value (from the default) = "//out/default/gen/components/viz/service/compositor_frame_fuzzer/binary_seed_corpus"
      From //components/viz/service/compositor_frame_fuzzer/BUILD.gn:9

show_includes
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:175

    Enable -H, which prints the include tree during compilation.
    For use by tools/clang/scripts/analyze_includes.py

simple_template_names
    Current value (from the default) = true
      From //build/config/compiler/BUILD.gn:203

    Use DWARF simple template names, with the following exceptions:
   
    * Windows is not supported as it doesn't use DWARF.
    * Apple platforms (e.g. MacOS, iPhone, iPad) aren't supported because xcode
      lldb doesn't have the needed changes yet.
    TODO(crbug.com/40244196): Remove if the upstream default ever changes.
   
    This greatly reduces the size of debug builds, at the cost of
    debugging information which is required by some specialized
    debugging tools.

skia_enable_skshaper
    Current value (from the default) = true
      From //third_party/skia/modules/skshaper/skshaper.gni:48

skia_enable_skshaper_tests
    Current value (from the default) = true
      From //third_party/skia/modules/skshaper/skshaper.gni:51

skia_use_dawn
    Current value (from the default) = true
      From //skia/features.gni:12

    Enable experimental Skia Graphite Dawn backend. Enabled on platforms where
    the team has verified that at least basic rendering to the screen is
    working.

skia_use_metal
    Current value (from the default) = false
      From //skia/features.gni:18

    Enable experimental Skia Graphite Metal backend. Intended only for debugging
    on non-official developer builds.

skip_buildtools_check
    Current value (from the default) = false
      From //third_party/perfetto/gn/perfetto.gni:361

    Skip buildtools dependency checks (needed for ChromeOS).

strip_debug_info
    Current value (from the default) = false
      From //build/config/compiler/compiler.gni:65

    Android-only: Strip the debug info of libraries within lib.unstripped to
    reduce size. As long as symbol_level > 0, this will still allow stacks to be
    symbolized.

structured_metrics_debug_enabled
    Current value (from the default) = true
      From //components/metrics/structured/buildflags/buildflags.gni:10

structured_metrics_enabled
    Current value (from the default) = true
      From //components/metrics/structured/buildflags/buildflags.gni:8

subpixel_font_rendering_disabled
    Current value (from the default) = false
      From //gpu/ipc/service/BUILD.gn:16

support_external_google_api_key
    Current value (from the default) = false
      From //google_apis/BUILD.gn:80

supports_llvm
    Current value (from the default) = true
      From //third_party/swiftshader/src/Reactor/reactor.gni:17

supports_os_accessibility_service
    Current value (from the default) = false
      From //services/accessibility/buildflags.gni:26

    Used to determine if the Accessibility Service should run
    assistive technology features, or if the service is running
    in a browser embedded in an OS that already has those features.

supports_subzero
    Current value (from the default) = true
      From //third_party/swiftshader/src/Reactor/reactor.gni:13

    Subzero doesn't support ARM64, LOONGARCH64, MIPS64, PPC64, and RISCV64 (only x86 and ARMv7a).

swiftshader_optimized_debug_build
    Current value (from the default) = true
      From //third_party/swiftshader/src/swiftshader.gni:23

    By default, build SwiftShader with optimizations enabled in debug
    for performance reasons. Set to false to build as unoptimized.

swiftshader_startup_dialog
    Current value (from the default) = false
      From //third_party/swiftshader/src/swiftshader.gni:27

    If enabled, debug builds on Windows will pop up a dialog when the
    SwiftShader DLL gets loaded, to facilitate attaching a debugger.

symbol_level
    Current value (from the default) = -1
      From //build/config/compiler/compiler.gni:60

    How many symbols to include in the build. This affects the performance of
    the build since the symbols are large and dealing with them is slow.
      2 means regular build with symbols.
      1 means minimal symbols, usually enough for backtraces only. Symbols with
    internal linkage (static functions or those in anonymous namespaces) may not
    appear when using this level.
      0 means no symbols.
      -1 means auto-set according to debug/release and platform.

sync_user_agent_product
    Current value (from the default) = "Chrome"
      From //components/sync/base/BUILD.gn:10

    Controls the product part of the user agent calculated in sync_util.cc.

sysroot
    Current value (from the default) = ""
      From //build/config/sysroot.gni:18

    The path of the sysroot for the current toolchain. If empty, default
    sysroot is used.

system_headers_in_deps
    Current value (from the default) = false
      From //build/toolchain/gcc_toolchain.gni:37

    Use -MD instead of -MMD for compiler commands. This is useful for tracking
    the comprehensive set of dependencies.  It's also required when building
    without the sysroot so that updates to system header files trigger a
    rebuild (when using the sysroot, the CR_SYSROOT_KEY define takes care of
    this already).

system_libdir
    Current value (from the default) = "lib"
      From //build/config/linux/pkg_config.gni:47

    CrOS systemroots place pkgconfig files at <systemroot>/usr/share/pkgconfig
    and one of <systemroot>/usr/lib/pkgconfig or <systemroot>/usr/lib64/pkgconfig
    depending on whether the systemroot is for a 32 or 64 bit architecture.
   
    When build under GYP, CrOS board builds specify the 'system_libdir' variable
    as part of the GYP_DEFINES provided by the CrOS emerge build or simple
    chrome build scheme. This variable permits controlling this for GN builds
    in similar fashion by setting the `system_libdir` variable in the build's
    args.gn file to 'lib' or 'lib64' as appropriate for the target architecture.

target_cpu
    Current value (from the default) = ""
      (Internally set; try `gn help target_cpu`.)

target_environment
    Current value (from the default) = ""
      From //build/config/ios/config.gni:11

    Configure the environment for which to build. Could be either "device",
    "simulator" or "catalyst". If unspecified, then it will be assumed to be
    "simulator" if the target_cpu is "x68" or "x64", "device" otherwise. The
    default is only there for compatibility reasons and will be removed (see
    crbug.com/1138425 for more details).

target_os
    Current value (from the default) = ""
      (Internally set; try `gn help target_os`.)

target_rpath
    Current value (from the default) = ""
      From //build/config/cast.gni:16

    If non empty, rpath of executables is set to this.
    If empty, default value is used.

target_sysroot
    Current value (from the default) = ""
      From //build/config/sysroot.gni:11

    The path of the sysroot that is applied when compiling using the target
    toolchain.

target_sysroot_dir
    Current value (from the default) = "//build/linux"
      From //build/config/sysroot.gni:14

    The path to directory containing linux sysroot images.

temporal_pgo_profile
    Current value (from the default) = false
      From //build/config/compiler/pgo/pgo.gni:39

    Whether to enable temporal pgo or not (experimental).

tests_have_location_tags
    Current value (from the default) = true
      From //testing/test.gni:21

    Some component repos (e.g. ANGLE) import //testing but do not have
    "location_tags.json", and so we don't want to try and upload the tags
    for their tests.
    And, some build configs may simply turn off generation altogether.

thin_lto_enable_cache
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:135

    Whether to enable thin lto incremental builds.
    See: https://clang.llvm.org/docs/ThinLTO.html#incremental
    The cache can lead to non-determinism: https://crbug.com/1486045

thin_lto_enable_optimizations
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:129

thorium_debug
    Current value (from the default) = true
      From //base/debug/debug.gni:35

    A special build flag for the Thorium debug builds.
   
    This enables stack traces in logs and non-fatalizes DCHECKs.
    Ultimately, it should help users collect necessary data for browser issues
    without setting up a dedicated debugger.

tint_build_benchmarks
    Current value (from the default) = true
      From //third_party/dawn/scripts/tint_overrides_with_defaults.gni:155

tint_build_cmds
    Current value (from the default) = false
      From //third_party/dawn/scripts/tint_overrides_with_defaults.gni:85

tint_build_glsl_validator
    Current value (from the default) = true
      From //third_party/dawn/scripts/tint_overrides_with_defaults.gni:125

tint_build_glsl_writer
    Current value (from the default) = true
      From //third_party/dawn/scripts/tint_overrides_with_defaults.gni:120

tint_build_hlsl_writer
    Current value (from the default) = true
      From //third_party/dawn/scripts/tint_overrides_with_defaults.gni:115

tint_build_ir_binary
    Current value (from the default) = true
      From //third_party/dawn/scripts/tint_overrides_with_defaults.gni:135

tint_build_ir_fuzzer
    Current value (from the default) = false
      From //third_party/dawn/scripts/tint_overrides_with_defaults.gni:140

tint_build_msl_writer
    Current value (from the default) = true
      From //third_party/dawn/scripts/tint_overrides_with_defaults.gni:110

tint_build_syntax_tree_writer
    Current value (from the default) = false
      From //third_party/dawn/scripts/tint_overrides_with_defaults.gni:130

tint_build_tintd
    Current value (from the default) = false
      From //third_party/dawn/scripts/tint_overrides_with_defaults.gni:145

tint_build_unittests
    Current value (from the default) = true
      From //third_party/dawn/scripts/tint_overrides_with_defaults.gni:150

tint_glslang_dir
    Current value (from the default) = "//third_party/glslang/src"
      From //third_party/dawn/scripts/tint_overrides_with_defaults.gni:66

tint_has_protobuf
    Current value (from the default) = true
      From //third_party/dawn/scripts/tint_overrides_with_defaults.gni:49

tint_lpm_dir
    Current value (from the default) = "//third_party/libprotobuf-mutator"
      From //third_party/dawn/scripts/tint_overrides_with_defaults.gni:81

tint_src_dir
    Current value (from the default) = "//third_party/dawn/src/tint"
      From //third_party/dawn/scripts/tint_overrides_with_defaults.gni:162

toolchain_allows_use_partition_alloc_as_malloc
    Current value (from the default) = true
      From //build/toolchain/toolchain.gni:36

    If false, the toolchain overrides `use_partition_alloc_as_malloc` in
    PartitionAlloc, to allow use of the system allocator.

toolchain_for_rust_host_build_tools
    Current value (from the default) = false
      From //build/toolchain/toolchain.gni:32

    Whether this toolchain is to be used for building host tools that are
    consumed during the build process. That includes proc macros and Cargo build
    scripts.

toolchain_supports_rust_thin_lto
    Current value (from the default) = true
      From //build/config/rust.gni:82

    Whether artifacts produced by the Rust compiler can participate in ThinLTO.
   
    One important consideration is whether the linker uses the same LLVM
    version as `rustc` (i.e. if it can understand the LLVM-IR from the
    compilation artifacts produced by `rustc`).  In LaCrOS and ash builds this
    may not be true - see b/299483903.
   
    TODO(crbug.com/40281834): Re-enable ThinLTO for Rust on LaCrOS
    TODO(b/300937673): Re-enable ThinLTO for Rust on ash-chrome

toolkit_views
    Current value (from the default) = true
      From //build/config/ui.gni:33

    True means the UI is built using the "views" framework.

treat_warnings_as_errors
    Current value (from the default) = true
      From //build/config/compiler/compiler.gni:50

    Default to warnings as errors for default workflow, where we catch
    warnings with known toolchains. Allow overriding this e.g. for Chromium
    builds on Linux that could use a different version of the compiler.
    With GCC, warnings in no-Chromium code are always not treated as errors.

use_afl
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:85

    Compile for fuzzing with AFL.

use_allocator_shim
    Current value (from the default) = true
      From //base/allocator/partition_allocator/partition_alloc.gni:40

    Causes all the allocations to be routed via allocator_shim.cc. Usually,
    the allocator shim will, in turn, route them to PartitionAlloc, but
    other allocators are also supported by the allocator shim.

use_alsa
    Current value (from the default) = true
      From //media/media_options.gni:201

use_amdgpu_minigbm
    Current value (from the default) = false
      From //third_party/minigbm/BUILD.gn:17

use_android_unwinder_v2
    Current value (from the default) = true
      From //build/config/compiler/compiler.gni:137

    Set to true to use the android unwinder V2 implementation.

use_arc_protected_media
    Current value (from the default) = false
      From //media/gpu/args.gni:34

    Indicates if the ChromeOS protected media functionality should also be
    utilized by HW video decoding for ARC.

use_asan_backup_ref_ptr
    Current value (from the default) = false
      From //base/allocator/partition_allocator/partition_alloc.gni:190

use_aura
    Current value (from the default) = true
      From //build/config/ui.gni:28

    Indicates if Aura is enabled. Aura is a low-level windowing library, sort
    of a replacement for GDI or GTK.

use_av1_hw_decoder
    Current value (from the default) = true
      From //media/gpu/args.gni:42

    A platform that is capable of hardware av1 decoding.

use_avx
    Current value (from the default) = false
      From //build/config/compiler_opt.gni:71

    AVX
    Normal Thorium baseline
    Present since Sandy Bridge (2011 2nd Gen. Core i series)
    and AMD Bulldozer (2012 AMD FX).
    Requires Windows 7 SP1 / Linux 2.6.30 or later to use.
    Uses new 128 bit registers and CPU blocks; a new era of SIMD.
    Includes AES and PCLMUL `-maes -mpclmul -mavx`

use_avx2
    Current value (from the default) = false
      From //build/config/compiler_opt.gni:79

    AVX2 (x86-64-v3)
    Second generation AVX, expanded to 256-bit registers.
    Present since Haswell (4th Gen. Core i series), and
    AMD Excavator (4th Gen. refinement of Bulldozer cores) and 
    Zen (1st Gen. Ryzen).
    Includes FMA3 `-mfma -mavx2` (`-ffp-contract` see below at FMA section)

use_avx512
    Current value (from the default) = false
      From //build/config/compiler_opt.gni:88

    AVX-512
    Third generation AVX, expanded to 512-bit registers.
    Present since Skylake (Specifically Skylake-X "Extreme Edition"
    processors), and AMD Zen 4 (4th Gen. Ryzen 7000).
    Only uses AVX-512 instructions common to all processors.
    `-mavx512f -mavx512cd -mavx512vl -mavx512bw -mavx512dq
     -mf16c -mlzcnt -mbmi2`

use_base_test_suite
    Current value (from the default) = true
      From //sandbox/linux/BUILD.gn:22

    On Android, use plain GTest.

use_blink
    Current value (from the default) = true
      From //build/config/features.gni:41

use_blink_extensions_chromeos
    Current value (from the default) = false
      From //third_party/blink/renderer/config.gni:46

    If true, the experimental renderer extensions library will be used.

use_blink_extensions_webview
    Current value (from the default) = false
      From //third_party/blink/renderer/config.gni:57

    If true, the WebView renderer extensions library will be used.
   
    Android WebView and Chrome on Android both use the same build configuration
    for Blink, and may use a common installation of the Blink libraries on a
    device. There is no precise concept of "is_webview". As such, Chrome on
    Android technically has the WebView extensions available in its version of
    Blink; however, the extensions are default-disabled. Chrome (and any other
    non-WebView products) should never attempt to enable the extensions at
    runtime.

use_bluez
    Current value (from the default) = true
      From //device/bluetooth/cast_bluetooth.gni:5

use_bolt
    Current value (from the default) = false
      From //build/config/compiler_opt.gni:19

    Whether to enable LLVM's BOLT optimizations.
    See https://github.com/llvm/llvm-project/blob/main/bolt/README.md

use_bundled_fontconfig
    Current value (from the default) = true
      From //third_party/fontconfig/fontconfig.gni:11

use_bundled_weston
    Current value (from the default) = false
      From //ui/ozone/platform/wayland/wayland.gni:14

    Checks if Weston must be compiled

use_centipede
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:82

    Compile for fuzzing with centipede.
    See https://github.com/google/centipede

use_cfi_cast
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:136

    Enable checks for bad casts: derived cast and unrelated cast.
    TODO(krasin): remove this, when we're ready to add these checks by default.
    https://crbug.com/626794

use_cfi_diag
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:70

    Print detailed diagnostics when Control Flow Integrity detects a violation.

use_cfi_icall
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:67

use_cfi_recover
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:74

    Let Control Flow Integrity continue execution instead of crashing when
    printing diagnostics (use_cfi_diag = true).

use_chromeos_model_service
    Current value (from the default) = false
      From //services/on_device_model/on_device_model.gni:15

use_chromeos_protected_av1
    Current value (from the default) = false
      From //media/gpu/args.gni:39

    Indicates if ChromeOS protected media supports the AV1 codec. By default
    H.264, VP9 and HEVC are enabled if protected media is enabled; AV1 is
    optional.

use_chromeos_protected_media
    Current value (from the default) = false
      From //media/gpu/args.gni:30

    Indicates if ChromeOS protected media support exists. This is used
    to enable the CDM daemon in Chrome OS as well as support for
    encrypted content with HW video decoders. This is always enabled for Lacros
    because it detects support at runtime.

use_clang_coverage
    Current value (from the default) = false
      From //build/config/coverage/coverage.gni:23

use_clang_profiling
    Current value (from the default) = false
      From //build/config/profiling/profiling.gni:10

use_clang_profiling_inside_sandbox
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:270

use_command_buffer
    Current value (from the default) = false
      From //device/vr/buildflags/buildflags.gni:23

use_cras
    Current value (from the default) = false
      From //media/media_options.gni:67

    Override to dynamically link the cras (ChromeOS audio) library.

use_crash_key_stubs
    Current value (from the default) = false
      From //components/crash/core/common/BUILD.gn:12

    If set to true, this will stub out and disable the entire crash key system.

use_cups
    Current value (from the default) = true
      From //printing/buildflags/buildflags.gni:36

use_cups_ipp
    Current value (from the default) = true
      From //printing/buildflags/buildflags.gni:66

    Enables the CUPS IPP printing backend.
    TODO(crbug.com/41003486): Remove this after CUPS PPD API calls are removed.

use_custom_libcxx
    Current value (from the default) = true
      From //build/config/c++/c++.gni:15

    Use in-tree libc++ (buildtools/third_party/libc++ and
    buildtools/third_party/libc++abi) instead of the system C++ library for C++
    standard library support.
    Don't check in changes that set this to false for more platforms; doing so
    is not supported.

use_custom_libcxx_for_host
    Current value (from the default) = false
      From //build/config/c++/c++.gni:24

    Use libc++ instead of stdlibc++ when using the host_cpu toolchain, even if
    use_custom_libcxx is false. This is useful for cross-compiles where a custom
    toolchain for the target_cpu has been set as the default toolchain, but
    use_custom_libcxx should still be true when building for the host.  The
    expected usage is to set use_custom_libcxx=false and
    use_custom_libcxx_for_host=true in the passed in buildargs.

use_custom_libunwind
    Current value (from the default) = false
      From //build/config/unwind.gni:6

    Use in-tree libunwind (buildtools/third_party/libunwind) instead of whatever
    system library provides unwind symbols (e.g. libgcc).

use_cxx17
    Current value (from the default) = false
      From //build_overrides/build.gni:54

    Allow projects that wish to stay on C++17 to override Chromium's default.
    TODO(crbug.com/40251117): evaluate removing this end of 2023

use_dawn
    Current value (from the default) = true
      From //ui/gl/features.gni:16

    Should Dawn support be compiled to back the WebGPU implementation?
    Also controls linking Dawn dependencies in such as SPIRV-Tools/SPIRV-Cross.

use_dbus
    Current value (from the default) = true
      From //build/config/features.gni:37

use_debug_fission
    Current value (from the default) = true
      From //build/config/compiler/compiler.gni:76

    use_debug_fission: whether to use split DWARF debug info
    files. This can reduce link time significantly, but is incompatible
    with some utilities such as icecc and ccache. Requires gold and
    gcc >= 4.8 or clang.
    http://gcc.gnu.org/wiki/DebugFission

use_distributed_point_functions
    Current value (from the default) = true
      From //third_party/distributed_point_functions/features.gni:6

use_dummy_lastchange
    Current value (from the default) = true
      From //build/util/lastchange.gni:9

use_dwarf5
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:163

    Enable DWARF v5.

use_evdev_gestures
    Current value (from the default) = false
      From //ui/events/ozone/evdev/BUILD.gn:15

    Support ChromeOS touchpad gestures with ozone.

use_external_fuzzing_engine
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:91

    Compile for fuzzing with an external engine (e.g., Grammarinator).

use_external_popup_menu
    Current value (from the default) = false
      From //content/common/features.gni:11

    Whether or not to use external popup menu.

use_exynos_minigbm
    Current value (from the default) = false
      From //third_party/minigbm/BUILD.gn:18

use_fake_screen_ai
    Current value (from the default) = false
      From //services/screen_ai/buildflags/features.gni:19

    Screen AI library is not available for MSAN and UBSAN.

use_fma
    Current value (from the default) = false
      From //build/config/compiler_opt.gni:97

    FMA
    "Fused Multiply Add" operations
    Present since Haswell and AMD Piledriver (2nd Gen. refinement
    of Bulldozer).
    `-mfma -ffp-contract=fast` (use -mfma3 -mfma4 for Piledriver)

use_freeslot_bitmap
    Current value (from the default) = false
      From //base/allocator/partition_allocator/partition_alloc.gni:121

use_full_mte
    Current value (from the default) = false
      From //base/allocator/partition_allocator/partition_alloc.gni:270

    Use full MTE protection available by changing the feature flag default
    values. So sync mode on all processes. Also disables permissive MTE.
   
    This is meant to be used primarily on bots. It is much easier to override
    the feature flags using a binary flag instead of updating multiple bots's
    scripts to pass command line arguments.

use_full_pdb_paths
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:171

    Override this to put full paths to PDBs in Windows PE files. This helps
    windbg and Windows Performance Analyzer with finding the PDBs in some local-
    build scenarios. This is never needed for bots or official builds. Because
    this puts the output directory in the DLLs/EXEs it breaks build determinism.
    Bugs have been reported to the windbg/WPA teams and this workaround will be
    removed when they are fixed.

use_fuzzilli
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:88

    Compile for fuzzing with Fuzzilli.

use_fuzztest_wrapper
    Current value (from the default) = true
      From //testing/libfuzzer/BUILD.gn:19

    Build individual_fuzztest_wrapper if use_fuzztest_wrapper is set.
    Some projects doesn't have //base and cannot build
    individual_fuzztest_wrapper.

use_gcm_from_platform
    Current value (from the default) = false
      From //components/gcm_driver/config.gni:8

    Use native GCM driver for all non-Android builds. On Android, the platform
    includes GMS which provides the GCM client.

use_ghash
    Current value (from the default) = true
      From //build/config/compiler/BUILD.gn:119

    Turn this on to use ghash feature of lld for faster debug link on Windows.
    http://blog.llvm.org/2018/01/improving-link-time-on-windows-with.html

use_gio
    Current value (from the default) = true
      From //build/config/features.gni:39

use_glib
    Current value (from the default) = true
      From //build/config/ui.gni:36

use_gtk
    Current value (from the default) = true
      From //build/config/linux/gtk/gtk.gni:9

    Whether or not we should use libgtk.

use_hashed_jni_names
    Current value (from the default) = false
      From //third_party/jni_zero/jni_zero.gni:26

    Use hashed symbol names to reduce JNI symbol overhead when not multiplexing.

use_icf
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:208

    Set to true to use icf, Identical Code Folding.

use_intel_minigbm
    Current value (from the default) = false
      From //third_party/minigbm/BUILD.gn:19

use_internal_autofill_patterns
    Current value (from the default) = false
      From //components/autofill/core/browser/BUILD.gn:32

    Normally, only branded builds use Google-internal sets of parsing patterns.
   
    Setting the variable 'use_internal_autofill_patterns' in args.gn overrides
    this default.

use_internal_isolated_origins
    Current value (from the default) = false
      From //components/site_isolation/BUILD.gn:21

    Normally, only Google Chrome Android and some Fuchsia WebEngine builds will
    use a Google-internal list of isolated origins defined below.
    If other Fuchsia embedders are added, the associated logic may need to be
    updated. See crbug.com/1179087.
   
    You can set the variable 'use_internal_isolated_origins' to true to use this
    Google-internal list of isolated origins even in a developer build.  Setting
    this variable explicitly to true will cause your build to fail if the
    internal file is missing.

use_jacoco_coverage
    Current value (from the default) = false
      From //build/config/coverage/coverage.gni:27

    Enables JaCoCo Java code coverage.

use_jank_tracker_for_experiments
    Current value (from the default) = false
      From //ui/latency/BUILD.gn:9

use_javascript_coverage
    Current value (from the default) = false
      From //build/config/coverage/coverage.gni:39

    Enables TypeScript/JavaScript code coverage.

use_kerberos
    Current value (from the default) = true
      From //net/features.gni:24

    Enable Kerberos authentication. It is disabled by default on iOS, Fuchsia
    and Chromecast, at least for now. This feature needs configuration
    (krb5.conf and so on).
    TODO(fuchsia): Enable kerberos on Fuchsia when it's implemented there.

use_layout_plugin
    Current value (from the default) = true
      From //third_party/blink/renderer/core/BUILD.gn:102

    Set to true to enable the clang layout plugin that help you to follow the
    layout-related restrictions during compilation.

use_libcxx_modules
    Current value (from the default) = false
      From //build/config/c++/c++.gni:46

    Use Clang header modules for libc++.
    This is experimental only (see crbug.com/543704).
    For details on the current state of modules in Chromium see
    https://chromium.googlesource.com/chromium/src/+/main/docs/modules.md

use_libfuzzer
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:78

    Compile for fuzzing with LLVM LibFuzzer.
    See http://www.chromium.org/developers/testing/libfuzzer

use_libgav1_parser
    Current value (from the default) = true
      From //third_party/libgav1/options.gni:9

use_libinput
    Current value (from the default) = false
      From //build/config/chromeos/args.gni:37

    Determines if we're willing to link against libinput

use_libjpeg_turbo
    Current value (from the default) = true
      From //third_party/libjpeg.gni:11

    Uses libjpeg_turbo as the jpeg implementation. Has no effect if
    use_system_libjpeg is set.

use_libpci
    Current value (from the default) = true
      From //third_party/angle/BUILD.gn:35

    Use the PCI lib to collect GPU information on Linux.

use_lld
    Current value (from the default) = true
      From //build/config/compiler/compiler.gni:37

    Set to true to use lld, the LLVM linker.
    In late bring-up on macOS (see docs/mac_lld.md).
    Tentatively used on iOS.
    The default linker everywhere else.

use_locally_built_instrumented_libraries
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:53

    Use dynamic libraries instrumented by one of the sanitizers instead of the
    standard system libraries. Set this flag to build the libraries from source.

use_login_database_as_backend
    Current value (from the default) = true
      From //components/password_manager/core/browser/buildflags.gni:12

    The legacy password store backend is supported on android but usually disabled
    in favor of a downstream implementation. Important: the support for this flag
    is planned to be removed in November 2024.

use_low_quality_image_interpolation
    Current value (from the default) = false
      From //third_party/blink/renderer/config.gni:43

    If true, defaults image interpolation to low quality.

use_marvell_minigbm
    Current value (from the default) = false
      From //third_party/minigbm/BUILD.gn:20

use_mediatek_minigbm
    Current value (from the default) = false
      From //third_party/minigbm/BUILD.gn:21

use_meson_minigbm
    Current value (from the default) = false
      From //third_party/minigbm/BUILD.gn:22

use_message_port_core
    Current value (from the default) = false
      From //components/cast/message_port/BUILD.gn:13

    If true, forces cast_api_bindings::CreatePlatformMessagePortPair to use
    cast_message_port::CreateMessagePortPair as its implementation. Otherwise,
    uses one of the other types based on platform.

use_ml_inliner
    Current value (from the default) = false
      From //build/config/compiler/compiler.gni:133

    Set to true to enable using the ML inliner in LLVM. This currently only
    enables the ML inliner when targeting Android.
    Currently the ML inliner is only supported on linux hosts

use_mpris
    Current value (from the default) = true
      From //components/system_media_controls/linux/buildflags/buildflags.gni:11

    Enables Chromium implementation of the MPRIS D-Bus interface for controlling
    media playback. See ../README.md for details.

use_msm_minigbm
    Current value (from the default) = false
      From //third_party/minigbm/BUILD.gn:23

use_nss_certs
    Current value (from the default) = true
      From //crypto/features.gni:9

    True if NSS is used for certificate handling.

use_official_enterprise_connectors_api_keys
    Current value (from the default) = false
      From //chrome/browser/BUILD.gn:74

    You can set the variable 'use_official_enterprise_connectors_api_keys' to
    true to use the Google-internal file containing official API keys
    for enterprise connector partners even in a developer build.  Setting this
    variable explicitly to true will cause your build to fail if the
    internal file is missing.
   
    Note that official builds always behave as if the variable
    was explicitly set to true, i.e. they always use official keys,
    and will fail to build if the internal file is missing.

use_official_google_api_keys
    Current value (from the default) = ""
      From //google_apis/BUILD.gn:29

    Set the variable 'use_official_google_api_keys' to true
    to use the Google-internal file containing official API keys
    even in a developer build.  Setting this variable explicitly to
    true will cause the build to fail if the internal file is missing.
   
    Set the variable to false to not use the internal file, even for
    Chrome-branded builds or when it exists in your checkout.
   
    Leave it set to "" to have the variable implicitly set to true for
    Chrome-branded builds or if
    //src/google_apis/internal/google_chrome_api_keys.h is present and false
    otherwise.
    This does not apply to iOS builds, which use different mechanisms and always
    evaluate to use_official_google_api_keys=false.
    See https://crbug.com/1183709.

use_ozone
    Current value (from the default) = true
      From //build/config/ozone.gni:12

    Indicates if Ozone is enabled. Ozone is a low-level library layer for Linux
    that does not require X11.

use_pangocairo
    Current value (from the default) = true
      From //build/config/linux/pangocairo/pangocairo.gni:9

use_partition_alloc
    Current value (from the default) = true
      From //base/allocator/partition_allocator/partition_alloc.gni:59

    Whether PartitionAlloc should be available for use or not.
    true makes PartitionAlloc linked to the executable or shared library and
    makes it available for use. It doesn't mean that the default allocator
    is PartitionAlloc, which is governed by |use_partition_alloc_as_malloc|.
   
    N.B. generally, embedders should look at this GN arg and at the
    corresponding buildflag to determine whether to interact with PA
    source at all (pulling the component in via GN, including headers,
    etc.). There is nothing stopping a lazy embedder from ignoring this
    and unconditionally using PA, but such a setup is inadvisable.
   
    In Chromium, this is set true, except:
   
    1.  On Cronet bots, because Cronet doesn't use PartitionAlloc at all,
        and doesn't wish to incur the library size increase (crbug.com/674570).
    2.  On NaCl (through this declaration), where PartitionAlloc doesn't
        build at all.

use_partition_alloc_as_malloc
    Current value (from the default) = true
      From //base/allocator/partition_allocator/partition_alloc.gni:76

    PartitionAlloc-Everywhere (PA-E). Causes allocator_shim.cc to route
    calls to PartitionAlloc, rather than some other platform allocator.

use_perfetto_trace_processor
    Current value (from the default) = true
      From //build_overrides/build.gni:61

    Use Perfetto's trace processor for converting protobuf-encoded traces to
    the legacy JSON format in base::TraceLog.

use_platform_icu_alternatives
    Current value (from the default) = false
      From //url/features.gni:10

    Enables the use of ICU alternatives in lieu of ICU for the target toolchain.
    The flag is used for Cronet to reduce the size of the Cronet binary.

use_polly
    Current value (from the default) = false
      From //build/config/compiler_opt.gni:15

    Whether to enable LLVM's Polly optimizations.
    See https://polly.llvm.org/

use_profi
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:180

    Enable Profi algorithm. Profi can infer block and edge counts.
    https://clang.llvm.org/docs/UsersManual.html#using-sampling-profilers
    TODO(crbug.com/1375958i:) Possibly enable this for Android too.

use_pulseaudio
    Current value (from the default) = true
      From //media/media_options.gni:212

use_qt
    Current value (from the default) = true
      From //ui/qt/qt.gni:12

    TODO(crbug.com/40260415): Allow QT in MSAN builds once QT is
    added to the instrumented libraries.

use_qt6
    Current value (from the default) = true
      From //ui/qt/qt.gni:22

use_radeon_minigbm
    Current value (from the default) = false
      From //third_party/minigbm/BUILD.gn:24

use_raw_ptr_asan_unowned_impl
    Current value (from the default) = false
      From //base/allocator/partition_allocator/partition_alloc.gni:194

    Use probe-on-destruct unowned ptr detection with ASAN.

use_raw_ptr_backup_ref_impl
    Current value (from the default) = true
      From //base/allocator/partition_allocator/partition_alloc.gni:180

    We want to use RawPtrBackupRefImpl as the raw_ptr<> implementation
    iff BRP support is enabled. However, for purpose of performance
    investigations we want to be able to control each separately.
   
    TEST ONLY! Don't touch unless you think you know what you're doing. Play
    with enable_backup_ref_ptr_support instead.

use_real_dbus_clients
    Current value (from the default) = false
      From //chromeos/dbus/config/use_real_dbus_clients.gni:9

    Instantiate real D-Bus clients instead of fakes.

use_reclient
    Current value (from the default) = false
      From //build/toolchain/rbe.gni:35

    Use Reclient as the RBE client by default.
    Set to false to use Siso's builtin RBE client.

use_reclient_links
    Current value (from the default) = false
      From //build/toolchain/rbe.gni:29

    Set to true to enable remote linking using reclient.

use_relative_vtables_abi
    Current value (from the default) = false
      From //build/config/compiler/compiler.gni:148

    Use offsets rather than pointers in vtables in order to reduce the number of
    relocations. This is safe to enable only when all C++ code is built with the
    flag set to the same value.

use_remoteexec
    Current value (from the default) = false
      From //build/toolchain/rbe.gni:26

    Set to true to enable remote executions.

use_rockchip_minigbm
    Current value (from the default) = false
      From //third_party/minigbm/BUILD.gn:25

use_rtti
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:78

    Build with C++ RTTI enabled. Chromium builds without RTTI by default,
    but some sanitizers are known to require it, like CFI diagnostics
    and UBsan variants.

use_safe_libstdcxx
    Current value (from the default) = false
      From //build/config/c++/c++.gni:68

    In case the C++ standard library implementation used is libstdc++, then
    enable its own hardening checks. As we cannot determine in GN if libstdc++
    is used or not, by default enable it for Linux without the custom libc++.

use_sanitizer_configs_without_instrumentation
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:118

    When enabled, only relevant sanitizer defines are set, but compilation
    happens with no extra flags. This is useful when in component build
    enabling sanitizers only in some of the components.

use_sanitizer_coverage
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:184

use_siso
    Current value (from the default) = false
      From //build/toolchain/siso.gni:6

    Placeholder to allow having use_siso in args.gn file.
    autoninja switches from Ninja to Siso when use_siso=true.

use_sse2
    Current value (from the default) = false
      From //build/config/compiler_opt.gni:36

    SSE2
    Normal x64 compiler baseline, present since Willamette (Original
    2001 Pentium 4) and AMD SledgeHammer (1st Gen. Opteron) and
    the Athlon 64. Big step from MMX, x87, and SSE (i.e. SSE1)
    Baseline requirement to run Windows since update KB4103718
    for Windows 7 SP1/Server 2008 R2 SP1/Home Server 2011.

use_sse3
    Current value (from the default) = true
      From //build/config/compiler_opt.gni:44

    SSE3
    Normal Chromium baseline, present since Prescott (2004 Pentium 4)
    and AMD SanDiego (2nd Gen. Opteron).
    Only applicable to 32 Bit Windows and Linux builds, where
    setting it to false allows making an SSE2 build. (`-mmmx -msse2`)
    `-msse3`

use_sse41
    Current value (from the default) = false
      From //build/config/compiler_opt.gni:53

    SSE4.1
    Normal PrimoBrowser baseline
    Normal ThoriumOS baseline because Core 2 Duo is the lowest
    hardware that other CrOS subsystems like drivers support.
    Present since Penryn (2007 45nm Core 2 Duo die shrink), and
    AMD Jaguar (2013 Athlon CPUs) and Bulldozer (2012 AMD FX).
    Includes SSSE3 since all SSSE3 `-mssse3 -msse4.1`

use_sse42
    Current value (from the default) = false
      From //build/config/compiler_opt.gni:62

    SSE4.2 (x86-64-v2)
    Present since Nehalem (2009 1st Generation Core i series), and
    the same AMD CPUs as above.
    Normal LaCrOS baseline since Sept 2023.
    See https://bugs.chromium.org/p/chromium/issues/detail?id=1475858
    Baseline for Windows since Windows 10 24H2.
    `-msse4.2`

use_static_angle
    Current value (from the default) = false
      From //ui/gl/features.gni:12

    Should ANGLE be linked statically?

use_swiftshader_with_subzero
    Current value (from the default) = true
      From //third_party/swiftshader/src/Reactor/reactor.gni:27

    Subzero produces much smaller binaries, so always use it when available,
    except for MSan builds which only get Reactor code instrumented with LLVM.

use_synaptics_minigbm
    Current value (from the default) = false
      From //third_party/minigbm/BUILD.gn:26

use_sysroot
    Current value (from the default) = true
      From //build/config/sysroot.gni:23

use_system_freetype
    Current value (from the default) = false
      From //build/config/freetype/freetype.gni:13

    Blink needs a recent and properly build-configured FreeType version to
    support OpenType variations, color emoji and avoid security bugs. By default
    we ship and link such a version as part of Chrome. For distributions that
    prefer to keep linking to the version the system, FreeType must be newer
    than version 2.7.1 and have color bitmap support compiled in. WARNING:
    System FreeType configurations other than as described WILL INTRODUCE TEXT
    RENDERING AND SECURITY REGRESSIONS.

use_system_harfbuzz
    Current value (from the default) = false
      From //third_party/harfbuzz-ng/harfbuzz.gni:11

    Blink uses a cutting-edge version of Harfbuzz; most Linux distros do not
    contain a new enough version of the code to work correctly. However,
    ChromeOS chroots (i.e, real ChromeOS builds for devices) do contain a
    new enough version of the library, and so this variable exists so that
    ChromeOS can build against the system lib and keep binary sizes smaller.

use_system_lcms2
    Current value (from the default) = false
      From //third_party/pdfium/pdfium.gni:69

    Don't build against bundled lcms2.

use_system_libdrm
    Current value (from the default) = true
      From //build/config/linux/libdrm/BUILD.gn:14

    Controls whether the build should use the version of libdrm library shipped
    with the system. In release builds of desktop Linux and Chrome OS we use the
    system version. Some Chromecast devices use this as well.

use_system_libffi
    Current value (from the default) = false
      From //build/config/linux/libffi/BUILD.gn:13

    Controls whether the build should use the version of libffi library shipped
    with the system. By default, we only use the system version on Chrome OS:
    on Linux, libffi must be statically linked to prevent a situation where the
    runtime version of libffi is different from the build-time version from the
    sysroot.

use_system_libjpeg
    Current value (from the default) = false
      From //third_party/libjpeg.gni:7

    Uses system libjpeg. If true, overrides use_libjpeg_turbo.

use_system_libopenjpeg2
    Current value (from the default) = false
      From //third_party/pdfium/pdfium.gni:72

    Don't build against bundled libopenjpeg2.

use_system_libpng
    Current value (from the default) = false
      From //third_party/pdfium/pdfium.gni:75

    Don't build against bundled libpng.

use_system_libsync
    Current value (from the default) = false
      From //third_party/libsync/BUILD.gn:13

    Controls whether the build should use the version of libsync
    library shipped with the system. In release builds of Chrome OS we
    use the system version, but when building on dev workstations we
    bundle it because Ubuntu doesn't ship a usable version.

use_system_libtiff
    Current value (from the default) = false
      From //third_party/pdfium/pdfium.gni:78

    Don't build against bundled libtiff.

use_system_libwayland
    Current value (from the default) = false
      From //third_party/wayland/features.gni:8

    Controls whether the build should use the version of Wayland
    library shipped with the system or Chromium third_party.

use_system_minigbm
    Current value (from the default) = true
      From //third_party/minigbm/BUILD.gn:15

    Controls whether the build should use the version of minigbm library shipped
    with the system. In release builds of desktop Linux and Chrome OS we use the
    system version.

use_system_zlib
    Current value (from the default) = false
      From //third_party/pdfium/pdfium.gni:81

    Don't build against bundled zlib.

use_tegra_minigbm
    Current value (from the default) = false
      From //third_party/minigbm/BUILD.gn:27

use_text_section_splitting
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:160

    This argument is to control whether enabling text section splitting in the
    final binary. When enabled, the separated text sections with prefix
    '.text.hot', '.text.unlikely', '.text.startup' and '.text.exit' will not be
    merged to '.text' section. This allows us to identify the hot code section
    ('.text.hot') in the binary, which allows our data collection pipelines to
    more easily identify code that we assume to be hot/cold that doesn't turn
    out to be such in the field.

use_thin_lto
    Current value (from the default) = false
      From //build/config/compiler/compiler.gni:88

use_udev
    Current value (from the default) = true
      From //build/config/features.gni:35

    libudev usage. This currently only affects the content layer.

use_unofficial_version_number
    Current value (from the default) = true
      From //base/version_info/use_unofficial_version_number.gni:8

use_v4l2_codec
    Current value (from the default) = false
      From //media/gpu/args.gni:15

use_v4lplugin
    Current value (from the default) = false
      From //media/gpu/args.gni:10

    Indicates if V4L plugin is used.

use_v8_context_snapshot
    Current value (from the default) = true
      From //tools/v8_context_snapshot/v8_context_snapshot.gni:28

use_vaapi
    Current value (from the default) = true
      From //media/gpu/args.gni:21

    Indicates if VA-API-based hardware acceleration is to be used. This
    is typically the case on x86-based ChromeOS devices.
    VA-API should also be compiled by default on x11/wayland linux devices
    using x86/x64.

use_vaapi_image_codecs
    Current value (from the default) = false
      From //media/gpu/args.gni:62

    VA-API also allows decoding of images, but we don't want to use this
    outside of chromeos, even if video decoding is enabled.

use_vc4_minigbm
    Current value (from the default) = false
      From //third_party/minigbm/BUILD.gn:28

use_viz_debugger
    Current value (from the default) = true
      From //components/viz/common/debugger/viz_debugger.gni:10

    Indicates if the Viz Debugger is enabled. This is disabled by default on
    official builds due to security and performance reasons. test
    crbug/1466891 Fuchia threading model does not play well with the
    visual debugger multithreaded submission mechanism.

use_wayland_gbm
    Current value (from the default) = true
      From //ui/ozone/platform/wayland/wayland.gni:11

    Checks if Wayland must be compiled with dmabuf/gbm feature, which allows a
    multi-process hardware accelerated mode.

use_webaudio_pffft
    Current value (from the default) = true
      From //third_party/blink/renderer/config.gni:20

    If true, use PFFFT for WebAudio FFT support. Do not use for Mac because the
    FFT library there is much faster.

use_wuffs_gif_parser
    Current value (from the default) = true
      From //third_party/wuffs/config.gni:6

use_xkbcommon
    Current value (from the default) = true
      From //ui/base/ui_features.gni:10

using_mismatched_sample_profile
    Current value (from the default) = false
      From //build/config/compiler/compiler.gni:99

    Whether we're using a sample profile collected on an architecture different
    than the one we're compiling for.
   
    It's currently not possible to collect AFDO profiles on anything but
    x86{,_64}.

v8_advanced_bigint_algorithms
    Current value (from the default) = true
      From //v8/gni/v8.gni:155

    Enable advanced BigInt algorithms, costing about 10-30 KB binary size
    depending on platform. Disabled on Android to save binary size.

v8_allocation_site_tracking
    Current value (from the default) = true
      From //v8/BUILD.gn:377

    Enable global allocation site tracking.

v8_android_log_stdout
    Current value (from the default) = false
      From //v8/BUILD.gn:31

    Print to stdout on Android.

v8_annotate_torque_ir
    Current value (from the default) = false
      From //v8/BUILD.gn:297

    Generate comments describing the Torque intermediate representation.

v8_array_buffer_internal_field_count
    Current value (from the default) = 0
      From //v8/BUILD.gn:73

    Sets the number of internal fields on array buffer objects.

v8_array_buffer_view_internal_field_count
    Current value (from the default) = 0
      From //v8/BUILD.gn:76

    Sets the number of internal fields on array buffer view objects.

v8_builtins_profiling_log_file
    Current value (from the default) = "default"
      From //v8/BUILD.gn:217

    Provides the given V8 log file as an input to mksnapshot, where it can be
    used for profile-guided optimization of builtins.
   
    To do profile-guided optimizations of builtins:
    1. Build with v8_enable_builtins_profiling = true
    2. Run your chosen workload with the --turbo-profiling-output flag.
       For Chrome, the invocation might look like this:
         chrome --no-sandbox --disable-extensions
           --js-flags="--turbo-profiling-output=v8.builtins.pgo"
           "http://localhost/test-suite"
    3. Run tools/builtins-pgo/get_hints.py to produce the branch hints,
       selecting min_count and threshold_ratio as you wish.
    4. Optionally repeat steps 2-3 for additional workloads, and use
       tools/builtins-pgo/combine_hints.py to combine the hints produced in
       step 3 into a single file.
    5. Build again with v8_builtins_profiling_log_file set to the file created
       in step 3 or 4.

v8_can_use_fpu_instructions
    Current value (from the default) = true
      From //v8/BUILD.gn:246

    Similar to vfp but on MIPS.

v8_check_header_includes
    Current value (from the default) = false
      From //v8/BUILD.gn:261

    Check that each header can be included in isolation (requires also
    setting the "check_v8_header_includes" gclient variable to run a
    specific hook).

v8_code_comments
    Current value (from the default) = ""
      From //v8/BUILD.gn:123

    Allow runtime-enabled code comments (with --code-comments). Enabled by
    default in debug builds.
    Sets -dV8_CODE_COMMENTS

v8_context_snapshot_filename
    Current value (from the default) = "v8_context_snapshot.bin"
      From //tools/v8_context_snapshot/v8_context_snapshot.gni:53

v8_control_flow_integrity
    Current value (from the default) = false
      From //v8/BUILD.gn:308

v8_correctness_fuzzer
    Current value (from the default) = false
      From //v8/gni/v8.gni:18

    Includes files needed for correctness fuzzing.

v8_current_cpu
    Current value (from the default) = "x64"
      From //build/config/v8_target_cpu.gni:63

    This argument is declared here so that it can be overridden in toolchains.
    It should never be explicitly set by the user.

v8_custom_deps
    Current value (from the default) = ""
      From //v8/BUILD.gn:34

    Dynamically set an additional dependency from v8/custom_deps.

v8_dcheck_always_on
    Current value (from the default) = true
      From //v8/BUILD.gn:445

v8_depend_on_icu_data_file
    Current value (from the default) = true
      From //v8/BUILD.gn:451

    Remote builds require an explicit dependency on icudat, but
    this breaks locally building V8 with ICU support when the file
    isn't present, which some embedders rely on. This option controls
    the explicit dependency and allows the build to complete.

v8_deprecation_warnings
    Current value (from the default) = true
      From //v8/BUILD.gn:55

    Enable compiler warnings when using V8_DEPRECATED apis.

v8_dict_property_const_tracking
    Current value (from the default) = false
      From //v8/BUILD.gn:356

    Experimental feature for tracking constness of properties in non-global
    dictionaries. Enabling this also always keeps prototypes in dict mode,
    meaning that they are not switched to fast mode.
    Sets -DV8_DICT_PROPERTY_CONST_TRACKING

v8_disable_leaptiering
    Current value (from the default) = ""
      From //v8/BUILD.gn:331

    Explicitly disable leaptiering (on builds where it would otherwise be enabled).

v8_disable_write_barriers
    Current value (from the default) = false
      From //v8/BUILD.gn:272

    Disable write barriers when GCs are non-incremental and
    heap has single generation.

v8_drumbrake_bounds_checks
    Current value (from the default) = false
      From //v8/BUILD.gn:395

v8_embed_script
    Current value (from the default) = ""
      From //v8/BUILD.gn:61

    Embeds the given script into the snapshot.

v8_embedder_string
    Current value (from the default) = ""
      From //v8/BUILD.gn:64

    Allows the embedder to add a custom suffix to the version string.

v8_enable_31bit_smis_on_64bit_arch
    Current value (from the default) = false
      From //v8/gni/v8.gni:169

v8_enable_allocation_folding
    Current value (from the default) = true
      From //v8/BUILD.gn:371

    Enable allocation folding globally (sets -dV8_ALLOCATION_FOLDING).
    When it's disabled, the --turbo-allocation-folding runtime flag will be ignored.

v8_enable_atomic_object_field_writes
    Current value (from the default) = ""
      From //v8/BUILD.gn:165

    Sets -dV8_ATOMIC_OBJECT_FIELD_WRITES and turns all field write operations
    into relaxed atomic operations.

v8_enable_backtrace
    Current value (from the default) = ""
      From //v8/gni/v8.gni:34

    Support for backtrace_symbols on linux.

v8_enable_builtin_jump_table_switch
    Current value (from the default) = true
      From //v8/BUILD.gn:428

    Enable jump table switch for built-in.

v8_enable_builtins_optimization
    Current value (from the default) = ""
      From //v8/gni/v8.gni:41

    Includes profiles to optimize builtins.

v8_enable_builtins_profiling
    Current value (from the default) = false
      From //v8/BUILD.gn:183

    Runs mksnapshot with --turbo-profiling. After building in this
    configuration, any subsequent run of d8 will output information about usage
    of basic blocks in builtins.

v8_enable_builtins_profiling_verbose
    Current value (from the default) = false
      From //v8/BUILD.gn:189

    Runs mksnapshot with --turbo-profiling-verbose. After building in this
    configuration, any subsequent run of d8 will output information about usage
    of basic blocks in builtins, including the schedule and disassembly of all
    used builtins.

v8_enable_builtins_reordering
    Current value (from the default) = true
      From //v8/BUILD.gn:198

    This build flag is used to control whether reorder builtins acoording to
    the call graph with C3 algorithm based builtin PGO profiling.

v8_enable_cet_ibt
    Current value (from the default) = false
      From //v8/gni/v8.gni:176

    Emit CET IBT landing pad instructions in JIT generated code (experimental).

v8_enable_cet_shadow_stack
    Current value (from the default) = false
      From //v8/gni/v8.gni:173

    Change code emission and runtime features to be CET shadow-stack compliant
    (incomplete and experimental).

v8_enable_concurrent_marking
    Current value (from the default) = true
      From //v8/BUILD.gn:169

    Controls the default value of v8_enable_concurrent_marking_state. See the
    default setting code below.

v8_enable_conservative_stack_scanning
    Current value (from the default) = false
      From //v8/gni/v8.gni:119

    Scan the call stack conservatively during garbage collection.

v8_enable_continuation_preserved_embedder_data
    Current value (from the default) = true
      From //v8/BUILD.gn:367

    Allow embedder data to be saved on continuations. Used to support
    TaskAttribution and `scheduler.yield()`.
    The flag enables disabling the feature, to test this data's overhead.

v8_enable_debug_code
    Current value (from the default) = ""
      From //v8/BUILD.gn:128

    Allow runtime-enabled debug code (with --debug-code). Enabled by default in
    debug builds.
    Sets -dV8_ENABLE_DEBUG_CODE

v8_enable_debugging_features
    Current value (from the default) = true
      From //v8/gni/v8.gni:45

    Turns on all V8 debug features. Enables running V8 in a pseudo debug mode
    within a release Chrome.

v8_enable_direct_handle
    Current value (from the default) = ""
      From //v8/gni/v8.gni:122

    Use direct pointers in handles (v8::internal::Handle and v8::Local).

v8_enable_disassembler
    Current value (from the default) = ""
      From //v8/BUILD.gn:67

    Sets -dENABLE_DISASSEMBLER.

v8_enable_drumbrake
    Current value (from the default) = false
      From //v8/BUILD.gn:386

    WebAssembly interpreter (DrumBrake)  build flag.

v8_enable_drumbrake_tracing
    Current value (from the default) = false
      From //v8/BUILD.gn:389

    Enable Wasm interpreter tracing.

v8_enable_etw_stack_walking
    Current value (from the default) = false
      From //v8/BUILD.gn:43

    Sets -DV8_ENABLE_ETW_STACK_WALKING. Enables ETW Stack Walking

v8_enable_experimental_tsa_builtins
    Current value (from the default) = false
      From //v8/BUILD.gn:443

    Use the experimental TSA-based definition for some builtins.

v8_enable_extensible_ro_snapshot
    Current value (from the default) = true
      From //v8/BUILD.gn:434

    Whether custom embedder snapshots may extend (= allocate new objects in)
    ReadOnlySpace.

v8_enable_external_code_space
    Current value (from the default) = ""
      From //v8/BUILD.gn:229

    Enable support for external code range relative to the pointer compression
    cage.
    Sets -dV8_EXTERNAL_CODE_SPACE

v8_enable_fast_mksnapshot
    Current value (from the default) = false
      From //v8/BUILD.gn:108

    Enable fast mksnapshot runs.

v8_enable_fast_torque
    Current value (from the default) = ""
      From //v8/BUILD.gn:111

    Optimize code for Torque executable, even during a debug build.

v8_enable_future
    Current value (from the default) = false
      From //v8/BUILD.gn:37

    Sets -DV8_ENABLE_FUTURE.

v8_enable_fuzztest
    Current value (from the default) = false
      From //v8/gni/v8.gni:114

    Enable FuzzTest

v8_enable_gdbjit
    Current value = false
      From //.gn:36
    Overridden from the default = true
      From //v8/BUILD.gn:254

v8_enable_google_benchmark
    Current value (from the default) = false
      From //v8/gni/v8.gni:127

v8_enable_handle_zapping
    Current value (from the default) = true
      From //v8/BUILD.gn:102

    Sets -dENABLE_HANDLE_ZAPPING.

v8_enable_heap_snapshot_verify
    Current value (from the default) = ""
      From //v8/BUILD.gn:374

    Enable runtime verification of heap snapshots produced for devtools.

v8_enable_hugepage
    Current value (from the default) = false
      From //v8/BUILD.gn:88

    Sets -dENABLE_HUGEPAGE

v8_enable_i18n_support
    Current value (from the default) = true
      From //v8/gni/v8.gni:49

    Enable ECMAScript Internationalization API. Enabling this feature will
    add a dependency on the ICU library.

v8_enable_ignition_dispatch_counting
    Current value (from the default) = false
      From //v8/BUILD.gn:178

    Sets -dV8_IGNITION_DISPATCH_COUNTING.
    Enables counting frequencies of bytecode dispatches. After building in this
    configuration, subsequent runs of d8 can output frequencies for each pair
    of (current, next) bytecode instructions executed if you specify
    --trace-ignition-dispatches-output-file, or can generate a JS object with
    those frequencies if you run with --expose-ignition-statistics and call the
    extension function getIgnitionDispatchCounters().

v8_enable_javascript_promise_hooks
    Current value (from the default) = false
      From //v8/BUILD.gn:362

    Allow for JS promise hooks (instead of just C++).

v8_enable_lazy_source_positions
    Current value (from the default) = true
      From //v8/BUILD.gn:268

    Enable lazy source positions by default.

v8_enable_lite_mode
    Current value (from the default) = false
      From //v8/gni/v8.gni:76

    Lite mode disables a number of performance optimizations to reduce memory
    at the cost of performance.
    Sets -DV8_LITE_MODE.

v8_enable_local_off_stack_check
    Current value (from the default) = false
      From //v8/gni/v8.gni:125

    Check for off-stack allocated local handles.

v8_enable_maglev
    Current value (from the default) = ""
      From //v8/gni/v8.gni:92

    Enable the Maglev compiler.
    Sets -dV8_ENABLE_MAGLEV

v8_enable_maglev_graph_printer
    Current value (from the default) = false
      From //v8/BUILD.gn:421

    Enable Maglev's graph printer.
    Sets -DV8_ENABLE_MAGLEV_GRAPH_PRINTER.

v8_enable_map_packing
    Current value (from the default) = false
      From //v8/BUILD.gn:359

    Enable map packing & unpacking (sets -dV8_MAP_PACKING).

v8_enable_memory_corruption_api
    Current value (from the default) = false
      From //v8/BUILD.gn:338

    Enable the memory corruption API. Useful for testing the sandbox.
    The memory corruption API is only exposed to JavaScript if sandbox testing
    mode is enabled at runtime, for example via --sandbox-fuzzing.
    WARNING This will enable builtins that (by design) cause memory corruption.
    Sets -DV8_ENABLE_MEMORY_CORRUPTION_API

v8_enable_memory_sealing
    Current value (from the default) = false
      From //v8/gni/v8.gni:181

    Use memory sealing to protect various global memory mappings for CFI
    (experimental).
    TODO(sroettger): enable by default once we have bot support for testing.

v8_enable_object_print
    Current value (from the default) = ""
      From //v8/BUILD.gn:147

    Sets -dOBJECT_PRINT.

v8_enable_pointer_compression
    Current value (from the default) = ""
      From //v8/gni/v8.gni:167

    Enable pointer compression (sets -dV8_COMPRESS_POINTERS).

v8_enable_pointer_compression_8gb
    Current value (from the default) = ""
      From //v8/BUILD.gn:400

    Enables pointer compression for 8GB heaps.
    Sets -DV8_COMPRESS_POINTERS_8GB.

v8_enable_pointer_compression_shared_cage
    Current value (from the default) = ""
      From //v8/gni/v8.gni:168

v8_enable_precise_zone_stats
    Current value (from the default) = false
      From //v8/BUILD.gn:342

    Experimental feature for collecting per-class zone memory stats.
    Requires use_rtti = true

v8_enable_private_mapping_fork_optimization
    Current value (from the default) = false
      From //v8/BUILD.gn:99

    Sets -dV8_ENABLE_PRIVATE_MAPPING_FORK_OPTIMIZATION.
   
    This flag speeds up the performance of fork/execve on Linux systems for
    embedders which use it (like Node.js). It works by marking the pages that
    V8 allocates as MADV_DONTFORK. Without MADV_DONTFORK, the Linux kernel
    spends a long time manipulating page mappings on fork and exec which the
    child process doesn't generally need to access.
   
    See v8:7381 for more details.

v8_enable_regexp_interpreter_threaded_dispatch
    Current value (from the default) = true
      From //v8/BUILD.gn:284

    Use token threaded dispatch for the regular expression interpreter.
    Use switch-based dispatch if this is false

v8_enable_runtime_call_stats
    Current value (from the default) = false
      From //v8/gni/v8.gni:108

v8_enable_sandbox
    Current value (from the default) = ""
      From //v8/BUILD.gn:328

    Enable the V8 sandbox.
    Sets -DV8_ENABLE_SANDBOX.

v8_enable_shared_ro_heap
    Current value (from the default) = ""
      From //v8/BUILD.gn:265

    Enable sharing read-only space across isolates.
    Sets -DV8_SHARED_RO_HEAP.

v8_enable_short_builtin_calls
    Current value (from the default) = ""
      From //v8/BUILD.gn:224

    Enable short builtins call instruction sequences by un-embedding builtins.
    Sets -dV8_SHORT_BUILTIN_CALLS

v8_enable_single_generation
    Current value (from the default) = ""
      From //v8/BUILD.gn:280

    Redirect allocation in young generation so that there will be
    only one single generation.

v8_enable_slow_dchecks
    Current value (from the default) = false
      From //v8/BUILD.gn:105

    Enable slow dchecks.

v8_enable_slow_tracing
    Current value (from the default) = true
      From //v8/BUILD.gn:425

    Enable slow tracing, e.g., tracing on every instruction or Turbofan node.
    Sets -DV8_ENABLE_SLOW_TRACING.

v8_enable_snapshot_code_comments
    Current value (from the default) = false
      From //v8/BUILD.gn:118

    Enable code comments for builtins in the snapshot (impacts performance).
    This also enables v8_code_comments.

v8_enable_snapshot_compression
    Current value (from the default) = false
      From //v8/BUILD.gn:301

v8_enable_snapshot_native_code_counters
    Current value (from the default) = ""
      From //v8/BUILD.gn:134

    Enable native counters from the snapshot (impacts performance, sets
    -dV8_SNAPSHOT_NATIVE_CODE_COUNTERS).
    This option will generate extra code in the snapshot to increment counters,
    as per the --native-code-counters flag.

v8_enable_sparkplug
    Current value (from the default) = ""
      From //v8/BUILD.gn:417

    Enable Sparkplug
    Sets -DV8_ENABLE_SPARKPLUG.

v8_enable_static_roots
    Current value (from the default) = ""
      From //v8/BUILD.gn:137

    Use pre-generated static root pointer values from static-roots.h.

v8_enable_static_roots_generation
    Current value (from the default) = false
      From //v8/BUILD.gn:141

    Mode used by gen-static-roots.py to have a heap layout which is identical
    to when v8_enable_static_roots is enabled.

v8_enable_sticky_mark_bits
    Current value (from the default) = false
      From //v8/BUILD.gn:440

    Use sticky mark-bits for separating object generations.

v8_enable_swiss_name_dictionary
    Current value (from the default) = false
      From //v8/BUILD.gn:346

    Experimental feature that uses SwissNameDictionary instead of NameDictionary
    as the backing store for all dictionary mode objects.

v8_enable_system_instrumentation
    Current value (from the default) = false
      From //v8/BUILD.gn:40

    Sets -DENABLE_SYSTEM_INSTRUMENTATION. Enables OS-dependent event tracing

v8_enable_test_features
    Current value (from the default) = ""
      From //v8/BUILD.gn:220

    Enables various testing features.

v8_enable_trace_baseline_exec
    Current value (from the default) = false
      From //v8/BUILD.gn:158

v8_enable_trace_feedback_updates
    Current value (from the default) = false
      From //v8/BUILD.gn:161

    Sets -dV8_TRACE_FEEDBACK_UPDATES.

v8_enable_trace_ignition
    Current value (from the default) = false
      From //v8/BUILD.gn:157

v8_enable_trace_maps
    Current value (from the default) = ""
      From //v8/BUILD.gn:150

    Sets -dV8_TRACE_MAPS.

v8_enable_trace_unoptimized
    Current value (from the default) = ""
      From //v8/BUILD.gn:156

    Sets -dV8_TRACE_UNOPTIMIZED.

v8_enable_turbofan
    Current value (from the default) = ""
      From //v8/gni/v8.gni:88

    Enable the Turbofan compiler.
    Sets -dV8_ENABLE_TURBOFAN.

v8_enable_turboshaft_csa
    Current value (from the default) = false
      From //v8/BUILD.gn:437

    Enable Turboshaft CSA pipeline.

v8_enable_unconditional_write_barriers
    Current value (from the default) = false
      From //v8/BUILD.gn:276

    Ensure that write barriers are always used.
    Useful for debugging purposes.

v8_enable_v8_checks
    Current value (from the default) = ""
      From //v8/BUILD.gn:153

    Sets -dV8_ENABLE_CHECKS.

v8_enable_verify_csa
    Current value (from the default) = false
      From //v8/BUILD.gn:144

    Enable code-generation-time checking of types in the CodeStubAssembler.

v8_enable_verify_heap
    Current value (from the default) = ""
      From //v8/BUILD.gn:49

    Sets -DVERIFY_HEAP.

v8_enable_verify_predictable
    Current value (from the default) = false
      From //v8/BUILD.gn:52

    Sets -DVERIFY_PREDICTABLE

v8_enable_vtunejit
    Current value (from the default) = false
      From //v8/BUILD.gn:82

    Sets -dENABLE_VTUNE_JIT_INTERFACE.

v8_enable_vtunetracemark
    Current value (from the default) = false
      From //v8/BUILD.gn:85

    Sets -dENABLE_VTUNE_TRACEMARK.

v8_enable_wasm_gdb_remote_debugging
    Current value (from the default) = false
      From //v8/gni/v8.gni:71

    Enable WebAssembly debugging via GDB-remote protocol.

v8_enable_wasm_simd256_revec
    Current value (from the default) = false
      From //v8/gni/v8.gni:102

    Enable 256-bit long vector re-vectorization pass in WASM compilation pipeline.

v8_enable_webassembly
    Current value (from the default) = ""
      From //v8/gni/v8.gni:99

    Include support for WebAssembly. If disabled, the 'WebAssembly' global
    will not be available, and embedder APIs to generate WebAssembly modules
    will fail. Also, asm.js will not be translated to WebAssembly and will be
    executed as standard JavaScript instead.
    Sets -dV8_ENABLE_WEBASSEMBLY.

v8_enable_zone_compression
    Current value (from the default) = ""
      From //v8/BUILD.gn:324

    Enable V8 zone compression experimental feature.
    Sets -DV8_COMPRESS_ZONES.

v8_etw_guid
    Current value (from the default) = ""
      From //v8/BUILD.gn:46

    Sets the GUID for the ETW provider

v8_expose_public_symbols
    Current value (from the default) = ""
      From //v8/gni/v8.gni:59

    Expose public symbols for native modules of Node.js and Electron. Default
    is false.

v8_expose_symbols
    Current value (from the default) = false
      From //v8/gni/v8.gni:62

    Deprecated for v8_expose_public_symbols.

v8_fuzzilli
    Current value (from the default) = false
      From //v8/gni/v8.gni:111

    Add fuzzilli fuzzer support.

v8_gcmole
    Current value (from the default) = false
      From //v8/gni/v8.gni:28

    Indicate if gcmole was fetched as a hook to make it available on swarming.

v8_generate_external_defines_header
    Current value (from the default) = false
      From //v8/BUILD.gn:350

    If enabled then macro definitions that are used in externally visible
    header files are placed in a separate header file v8-gn.h.

v8_has_valgrind
    Current value (from the default) = false
      From //v8/gni/v8.gni:25

    Indicate if valgrind was fetched as a custom deps to make it available on
    swarming.

v8_icu_path
    Current value (from the default) = "//third_party/icu"
      From //v8/gni/v8.gni:161

    Location of icu.

v8_imminent_deprecation_warnings
    Current value = false
      From //.gn:37
    Overridden from the default = true
      From //v8/BUILD.gn:58

    Enable compiler warnings when using V8_DEPRECATE_SOON apis.

v8_is_on_release_branch
    Current value (from the default) = true
      From //v8/gni/release_branch_toggle.gni:9

v8_jitless
    Current value (from the default) = false
      From //v8/BUILD.gn:413

    Enable jitless mode, including compile-time optimizations. Note that even
    when this is set to 'false', one can run V8 in jitless mode at runtime by
    passing the `--jitless` flag; but then you miss out on compile-time
    optimizations.

v8_log_builtins_block_count_input
    Current value (from the default) = ""
      From //v8/BUILD.gn:194

    This build flag is used to input a builtin pgo file containing raw
    execution counts (as opposed to branch hints), which are embedded into
    the `--trace-turbo` .json file from `mksnapshot`.

v8_monolithic
    Current value (from the default) = false
      From //v8/gni/v8.gni:55

    Enable monolithic static library for embedders.

v8_multi_arch_build
    Current value (from the default) = false
      From //v8/gni/v8.gni:21

    Adds additional compile target for building multiple architectures at once.

v8_no_inline
    Current value (from the default) = false
      From //v8/BUILD.gn:240

    Switches off inlining in V8.

v8_optimized_debug
    Current value (from the default) = true
      From //v8/gni/v8.gni:31

    Turns on compiler optimizations in V8 in Debug build.

v8_os_page_size
    Current value (from the default) = "0"
      From //v8/BUILD.gn:243

    Override OS page size when generating snapshot

v8_postmortem_support
    Current value (from the default) = false
      From //v8/BUILD.gn:234

    With post mortem support enabled, metadata is embedded into libv8 that
    describes various parameters of the VM for use by debuggers. See
    tools/gen-postmortem-metadata.py for details.

v8_promise_internal_field_count
    Current value (from the default) = 0
      From //v8/BUILD.gn:70

    Sets the number of internal fields on promise objects.

v8_scriptormodule_legacy_lifetime
    Current value (from the default) = false
      From //v8/BUILD.gn:383

    TODO(cbruni, v8:12302): Remove once API is migrated
    Enable legacy mode for ScriptOrModule's lifetime. By default it's a
    temporary object, if enabled it will be kept alive by the parent Script.
    This is only used by nodejs.

v8_shortcut_strings_in_minor_ms
    Current value (from the default) = false
      From //v8/BUILD.gn:430

v8_snapshot_toolchain
    Current value (from the default) = ""
      From //v8/gni/snapshot_toolchain.gni:34

    The v8 snapshot needs to be built by code that is compiled with a
    toolchain that matches the bit-width of the target CPU, but runs on
    the host.

v8_static_library
    Current value (from the default) = false
      From //v8/gni/v8.gni:52

    Use static libraries instead of source_sets.

v8_symbol_level
    Current value (from the default) = 2
      From //v8/gni/v8.gni:68

    Override global symbol level setting for v8.

v8_target_cpu
    Current value (from the default) = ""
      From //build/config/v8_target_cpu.gni:33

    This arg is used when we want to tell the JIT-generating v8 code
    that we want to have it generate for an architecture that is different
    than the architecture that v8 will actually run on; we then run the
    code under an emulator. For example, we might run v8 on x86, but
    generate arm code and run that under emulation.
   
    This arg is defined here rather than in the v8 project because we want
    some of the common architecture-specific args (like arm_float_abi or
    mips_arch_variant) to be set to their defaults either if the current_cpu
    applies *or* if the v8_current_cpu applies.
   
    As described below, you can also specify the v8_target_cpu to use
    indirectly by specifying a `custom_toolchain` that contains v8_$cpu in the
    name after the normal toolchain.
   
    For example, `gn gen --args="custom_toolchain=...:clang_x64_v8_arm64"`
    is equivalent to setting --args=`v8_target_cpu="arm64"`. Setting
    `custom_toolchain` is more verbose but makes the toolchain that is
    (effectively) being used explicit.
   
    v8_target_cpu can only be used to target one architecture in a build,
    so if you wish to build multiple copies of v8 that are targeting
    different architectures, you will need to do something more
    complicated involving multiple toolchains along the lines of
    custom_toolchain, above.

v8_typed_array_max_size_in_heap
    Current value (from the default) = 64
      From //v8/BUILD.gn:252

    Controls the threshold for on-heap/off-heap Typed Arrays.

v8_use_external_startup_data
    Current value (from the default) = ""
      From //v8/gni/v8.gni:38

    Use external files for startup data blobs:
    the JS builtins sources and the start snapshot.

v8_use_libm_trig_functions
    Current value (from the default) = true
      From //v8/gni/v8.gni:158

    TODO: macros for determining endian type are clang specific.

v8_use_mips_abi_hardfloat
    Current value (from the default) = true
      From //v8/BUILD.gn:249

    Similar to the ARM hard float ABI but on MIPS.

v8_use_perfetto
    Current value (from the default) = false
      From //v8/gni/v8.gni:65

    Implement tracing using Perfetto (https://perfetto.dev).

v8_use_siphash
    Current value (from the default) = false
      From //v8/BUILD.gn:237

    Use Siphash as added protection against hash flooding attacks.

v8_use_zlib
    Current value (from the default) = true
      From //v8/BUILD.gn:404

    Compile V8 using zlib as dependency.
    Sets -DV8_USE_ZLIB

v8_value_deserializer_hard_fail
    Current value (from the default) = false
      From //v8/BUILD.gn:407

    Make ValueDeserializer crash if the data to deserialize is invalid.

v8_verify_builtins_compatibility
    Current value (from the default) = false
      From //v8/BUILD.gn:287

    Enforce equality of builtins hashes from compatible architectures.

v8_verify_deterministic_mksnapshot
    Current value (from the default) = false
      From //v8/BUILD.gn:290

    Check mksnapshot determinism by running it multiple times.

v8_verify_torque_generation_invariance
    Current value (from the default) = false
      From //v8/BUILD.gn:294

    Enable additional targets necessary for verification of torque
    file generation

v8_win64_unwinding_info
    Current value (from the default) = true
      From //v8/BUILD.gn:114

    Enable the registration of unwinding info for Windows x64 and ARM64.

v8_zlib_path
    Current value (from the default) = "//third_party/zlib"
      From //v8/gni/v8.gni:164

    Location of zlib.

validate_header_name
    Current value (from the default) = ""
      From //chrome/browser/request_header_integrity/buildflags.gni:13

vma_vulkan_headers_dir
    Current value = "//third_party/vulkan-headers/src"
      From //.gn:65
    Overridden from the default = "//third_party/vulkan-deps/vulkan-headers/src"
      From //third_party/vulkan_memory_allocator/BUILD.gn:8

webnn_enable_tflite_profiler
    Current value (from the default) = false
      From //services/webnn/features.gni:11

    Enable logging of TFLite profiling information on MLGraph destruction.

webnn_use_tflite
    Current value (from the default) = true
      From //services/webnn/features.gni:8

widevine_root
    Current value (from the default) = "."
      From //third_party/widevine/cdm/widevine.gni:63

    Relative root directory to //third_party/widevine/cdm for CDM files.
    Can be overridden if the CDM files are located in other places.

win_console_app
    Current value (from the default) = false
      From //build/config/win/console_app.gni:12

    If true, builds as a console app (rather than a windowed app), which allows
    logging to be printed to the user. This will cause a terminal window to pop
    up when the executable is not run from the command line, so should only be
    used for development. Only has an effect on Windows builds.

winappsdk_dir
    Current value (from the default) = ""
      From //third_party/angle/gni/angle.gni:135

    Windows App SDK is a separate dependency from nuget.org that needs to
    be pre-processed before being used.

zlib_symbols_visible
    Current value (from the default) = false
      From //third_party/zlib/BUILD.gn:11

    Expose zlib's symbols, used by Node.js to provide zlib APIs for its native
    modules.

